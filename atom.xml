<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>CSS Animation</title>
 <link href="https://cssanimation.rocks/atom.xml" rel="self"/>
 <link href="https://cssanimation.rocks/"/>
 <updated>2015-03-31T22:49:38+01:00</updated>
 <id>https://cssanimation.rocks</id>
 <author>
   <name>Donovan</name>
   <email>hello@cssanimation.rocks</email>
 </author>

 
 <entry>
   <title>Mac Plus CSS</title>
   <link href="https://cssanimation.rocks/macplus"/>
   <updated>2015-03-31T00:00:00+01:00</updated>
   <id>https://cssanimation.rocks/macplus</id>
   <content type="html">&lt;p&gt;I will always remember the moment I got to use the Apple Mac Plus. In this post I will try to pay tribute to this lovely computer by creating it in CSS.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;Retro style&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s build (virtually) a computer. Not just any old computer, but a computer that was, for many of us, an introduction into the world of Apple. The Macintosh Plus, codename Mr. T, was first introduced in 1986 and packed a whopping 1MB of RAM and an 8 MHz processor. Aside from all that raw power, it was a seriously cute design, which made the computer more fun to use. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/macplus/mac.jpg&quot; alt=&quot;Credit: Vectronic&amp;#39;s Apple World&quot;&gt;&lt;/p&gt;

&lt;p&gt;In this project I will build a 3D model of the Macintosh Plus and display it in a three dimensional setting. Using CSS Keyframe animation we&amp;rsquo;ll make it move on screen to show off the 3D effect better.&lt;/p&gt;

&lt;h2&gt;Why use CSS?&lt;/h2&gt;

&lt;p&gt;With Cascading Style Sheets are the standard way to style web page content. Everything from fonts, colors, positioning and background images is handled by CSS, and it is an essential tool for making modern web pages. It&amp;rsquo;s not just for two-dimensional content. With the use of 3D transforms and positioning, you can use CSS to add depth too.&lt;/p&gt;

&lt;p&gt;Creating scenes in CSS results in smaller file sizes than images. In this example, the CSS compresses to just 4KB and the HTML less than 1KB. An equivalent image would be 100KB or more.&lt;/p&gt;

&lt;h2&gt;Live demo and source code&lt;/h2&gt;

&lt;p&gt;See the &lt;a href=&quot;http://hop.ie/mac/&quot;&gt;CSS Mac Plus online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Full source code &lt;a href=&quot;https://github.com/donovanh/mac/archive/master.zip&quot;&gt;can be downloaded here&lt;/a&gt;, and you can view the full &lt;a href=&quot;https://github.com/donovanh/mac/blob/master/stylesheets/screen.css&quot;&gt;CSS file on Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also follow along the various stages by looking up the &lt;code&gt;examples&lt;/code&gt; folder in &lt;a href=&quot;https://github.com/donovanh/mac/archive/master.zip&quot;&gt;the project files&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;On Prefixes&lt;/h2&gt;

&lt;p&gt;I have omitted any CSS prefixes from the code examples to make the code easier to read. When working on this yourself make sure to include prefixes for the other browsers, such as the &lt;code&gt;webkit&lt;/code&gt;, &lt;code&gt;moz&lt;/code&gt;, &lt;code&gt;ms&lt;/code&gt;, and &lt;code&gt;o&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Setting the stage&lt;/h2&gt;

&lt;p&gt;When creating 3D using HTML we need a scene within which to build it. Start with a container HTML element:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;div class=&amp;quot;stage&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a simple div with the class stage, and it acts as a container for our 3D object.&lt;/p&gt;

&lt;p&gt;To establish it as a 3D container, we set some CSS properties, &lt;code&gt;perspective&lt;/code&gt; and &lt;code&gt;perspective-origin&lt;/code&gt;. The perspective property is similar to a scene&amp;rsquo;s vanishing point. The smaller the value, the shorter the vanishing point and more extreme the effect. This image shows how changing the value changes the shape on a scene:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/macplus/01-perspective.png&quot; alt=&quot;Different perspectives: 500px vs 2500px - examples/01-Perspective/index.html&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Try it yourself&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;d like to have a go, look for the &lt;code&gt;screen.css&lt;/code&gt; file in the &lt;code&gt;examples/01-Perspective&lt;/code&gt; folder in the project files. You&amp;rsquo;ll be able to update the perspective value and see the effect by opening the &lt;code&gt;index.html&lt;/code&gt; file from the same folder in your browser.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;perspective-origin&lt;/code&gt; property sets the viewing position. Changing it allows you to look down onto the scene from above, up from below or in from the side.&lt;/p&gt;

&lt;p&gt;In this example I&amp;rsquo;ve gone for a perspective value of 1,600 pixels. The CSS looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.stage {
  perspective: 1600px;
  perspective-origin: 50% 100px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;stylesheets&lt;/code&gt; folder within the project ZIP file contains the full CSS rules for setting the various other properties on the stage, including a background, width and height.&lt;/p&gt;

&lt;h2&gt;Planning the structure&lt;/h2&gt;

&lt;p&gt;With a stage in place we&amp;rsquo;ll use some HTML elements to create the computer. Rather than try to include every last detail, we&amp;rsquo;ll focus on the front detailing for the most part.&lt;/p&gt;

&lt;p&gt;The main body of the Mac is a box, tilted slightly back at an angle and sitting on a flat base. &lt;/p&gt;

&lt;p&gt;This will mean making two boxes, one tilted back a little and sitting on a flatter box. To create this effect, we&amp;rsquo;ll make use of the CSS &lt;code&gt;transform&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like to see the full HTML, it can be found in the project files within the &lt;code&gt;index.html&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;Transforms&lt;/h2&gt;

&lt;p&gt;The CSS &lt;code&gt;transform&lt;/code&gt; property allows us to rotate, skew, position and even scale elements on the page. We can make use of the positioning and rotation to create our scene.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;transform&lt;/code&gt; property might look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.example {
  transform: rotateY(45deg) translateZ(-100px);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You build a transform by chaining a series of statements. In this example, the example element is rotated 45 degrees around the Y-axis, and then pushed back 100px along the Z-axis.&lt;/p&gt;

&lt;p&gt;It should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/macplus/02-Transforms.png&quot; alt=&quot;Front and back panels transformed into place - examples/02-Transforms/index.html&quot;&gt; &lt;/p&gt;

&lt;p&gt;An example of CSS transforms can be found in the &lt;code&gt;examples/02-Transforms&lt;/code&gt; folder within the project files. Two elements are positioned in the example, and their position can be changed by editing the includes &lt;code&gt;02-Transforms/css/screen.css&lt;/code&gt; file. &lt;/p&gt;

&lt;h3&gt;Transform-origin&lt;/h3&gt;

&lt;p&gt;When rotating elements around the place, it’s worth keeping in mind that the transforms have an origin that can be set. The transform origin is a point referred to by specifying the X, Y and Z values. This is the default:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.default-origin {
  transform-origin: 50% 50% 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When building this example I kept the default but it’s worth knowing that it’s there.&lt;/p&gt;

&lt;h2&gt;Making the boxes&lt;/h2&gt;

&lt;p&gt;We can use some transforms to set up the main body of the computer. The HTML looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;div class=&amp;quot;stage&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;positioning animated&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;mac&amp;quot;&amp;gt;
      &amp;lt;figure class=&amp;quot;back&amp;quot;&amp;gt;&amp;lt;/figure&amp;gt;
      &amp;lt;figure class=&amp;quot;left&amp;quot;&amp;gt;&amp;lt;/figure&amp;gt;
      &amp;lt;figure class=&amp;quot;right&amp;quot;&amp;gt;&amp;lt;/figure&amp;gt;
      &amp;lt;figure class=&amp;quot;top&amp;quot;&amp;gt;&amp;lt;/figure&amp;gt;
      &amp;lt;figure class=&amp;quot;base-front&amp;quot;&amp;gt;&amp;lt;/figure&amp;gt;
      &amp;lt;figure class=&amp;quot;base-left&amp;quot;&amp;gt;&amp;lt;/figure&amp;gt;
      &amp;lt;figure class=&amp;quot;base-right&amp;quot;&amp;gt;&amp;lt;/figure&amp;gt;
      &amp;lt;figure class=&amp;quot;base-back&amp;quot;&amp;gt;&amp;lt;/figure&amp;gt;
      &amp;lt;figure class=&amp;quot;front&amp;quot;&amp;gt;&amp;lt;/figure&amp;gt;
      &amp;lt;figure class=&amp;quot;shadow&amp;quot;&amp;gt;&amp;lt;/figure&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Within the stage, there&amp;rsquo;s a &lt;code&gt;div&lt;/code&gt; I&amp;rsquo;ll use to position the computer on the page. Within that is the Mac itself. The two boxes are themselves made up of &lt;code&gt;figure&lt;/code&gt; elements. These elements represent the sides, top, front and back of the two boxes.&lt;/p&gt;

&lt;p&gt;There is also a &lt;code&gt;figure&lt;/code&gt; to represent the shadow.&lt;/p&gt;

&lt;p&gt;This example can be found in the &lt;code&gt;examples/03-Boxes&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;The result we&amp;rsquo;ll be going for looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/macplus/04-Boxes.png&quot; alt=&quot;CSS Boxes - examples/03-Boxes/index.html&quot;&gt; &lt;/p&gt;

&lt;p&gt;Each of the boxes are transformed into place using the CSS &lt;code&gt;transform&lt;/code&gt; property, and CSS &lt;code&gt;gradients&lt;/code&gt; are used to add depth to the scene.&lt;/p&gt;

&lt;p&gt;The CSS looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.front {
  height: 11.5em;
  width: 9.6em;
  background: #e0e0e0;
  transform: rotateX(5deg) translateZ(5.43em);
}
.back {
  height: 11.5em;
  width: 9.6em;
  background: linear-gradient(top, #f2f2f2, #e6e6e6 0.25em, #c2c2c2);
  transform: rotateX(5deg) translateZ(-5.45em) rotateY(180deg);
}
.top {
  height: 10.95em;
  width: 9.6em;
  background-color: #ebf0dc;
  background: linear-gradient(left, #fafafa, #d9d9d9 0.25em, #d9d9d9 9.35em, #fafafa);
  transform: rotateX(5deg) rotateX(90deg) translateZ(5.45em);
}
.left {
  height: 11.5em;
  width: 10.9em;
  background: linear-gradient(top, #ffffff, #e0e0e0 0.25em, #b3b3b3);
  transform: rotateX(5deg) rotateY(-90deg) translateZ(5.45em);
}
.right {
  height: 11.5em;
  width: 10.9em;
  background: linear-gradient(top, #ffffff, #e0e0e0 0.25em, #b3b3b3);
  transform: rotateX(5deg) rotateY(90deg) translateZ(4.14em);
}
.base-front {
  height: 2.1em;
  width: 9.6em;
  background: #c2c2c2;
  transform: translateY(10.7em) translateZ(5em);
}
.base-back {
  height: 2.1em;
  width: 9.6em;
  background: #b3b3b3;
  transform: translateY(10.7em) translateZ(-5em) rotateY(180deg);
}
.base-left {
  height: 2.1em;
  width: 10em;
  background: #b3b3b3;
  transform: translateY(10.7em) rotateY(-90deg) translateZ(4.99em);
}
.base-right {
  height: 2.1em;
  width: 10em;
  background: #b3b3b3;
  transform: translateY(10.7em) rotateY(90deg) translateZ(4.58em);
}
.shadow {
  width: 10em;
  height: 11em;
  background: transparent;
  transform: rotateX(90deg) translateZ(-7.4em) translateX(20em);
  box-shadow: -20.2em 0 1.8em rgba(100, 90, 100, 0.4);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each of the figures has been given a width and height, and a CSS background gradient or color. The figures are then each positioned using the &lt;strong&gt;transform&lt;/strong&gt; property. For example, the left side is rotated 90 degrees before being translated (moved) back half the width of the computer.&lt;/p&gt;

&lt;p&gt;The front figure is translated forwards, along the Z-axis, half the length of the computer and the back is rotated 180 degrees before being translated back.&lt;/p&gt;

&lt;p&gt;For the pieces of the top box, each of the figures is rotated 5 degrees back around the X-axis. This means that the main body of the Macintosh Plus is tilted back.&lt;/p&gt;

&lt;p&gt;Finally the shadow &lt;code&gt;figure&lt;/code&gt; makes use of the CSS &lt;code&gt;box-shadow&lt;/code&gt; property to create a shadow that makes it look like the box is sitting on a flat surface.&lt;/p&gt;

&lt;h2&gt;Bezels&lt;/h2&gt;

&lt;p&gt;A feature of this computer is the sloped edges around the front. These edges, which I&amp;rsquo;ll refer to as bezels, help soften the hard corners of the box and make it look less boxy.&lt;/p&gt;

&lt;p&gt;To achieve this I added some extra elements to the front &lt;code&gt;figure&lt;/code&gt;, like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;figure class=&amp;quot;front&amp;quot;&amp;gt;
  &amp;lt;span class=&amp;quot;bezel-top&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;bezel-left&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;bezel-right&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;bezel-bottom&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/figure&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;span&lt;/code&gt; elements within the front figure each represent one of these bezels. With some styles added, they will look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/macplus/04b-Bezels.png&quot; alt=&quot;Bezels added to front - examples/04-Bezels/index.html&quot;&gt; &lt;/p&gt;

&lt;p&gt;This example can be found in the &lt;code&gt;examples/04-Bezels&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;The following CSS positions each, and makes use of a border-width trick to create sloped edges.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.front .bezel-top {
  border-top: 0.75em solid #f2f2f2;
  border-right: 0.5em solid transparent;
  border-left: 0.5em solid transparent;
  width: 8.6em;
}
.front .bezel-left {
  border-top: 0.5em solid #d9d9d9;
  border-right: 0.75em solid transparent;
  border-left: 0.75em solid transparent;
  width: 10em;
  transform: rotateZ(-90deg) translateX(-5.5em) translateY(-5.5em);
}
.front .bezel-right {
  border-top: 0.5em solid #d4d4d4;
  border-right: 0.75em solid transparent;
  border-left: 0.75em solid transparent;
  width: 10em;
  transform: rotateZ(90deg) translateX(5.5em) translateY(-3.62em);
}
.front .bezel-bottom {
  border-top: 0.75em solid #cccccc;
  border-right: 0.5em solid transparent;
  border-left: 0.5em solid transparent;
  width: 8.65em;
  transform: rotateZ(180deg) translateY(-10.76em);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each bezel has 3 borders. For the top bezel, we set a colored border on the top. We then set two &lt;em&gt;transparent&lt;/em&gt; borders on the left and right sides. In CSS, when a border meets a border of another color, the line where they meet is diagonal. This means that the transparent borders result in diagonal edges to the colored border.&lt;/p&gt;

&lt;p&gt;This technique is applied to each of the bezels, creating the appearance of sloped edges on each.&lt;/p&gt;

&lt;p&gt;The bezels also have a transform applied to rotate and position them at the side of the front figure.&lt;/p&gt;

&lt;h2&gt;More Details&lt;/h2&gt;

&lt;p&gt;With the main boxes of the computer in place we can add the various details that make it look like a Macintosh Plus, such as the screen, icon and disk drive. &lt;/p&gt;

&lt;p&gt;The front figure contains the following HTML:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;figure class=&amp;quot;front&amp;quot;&amp;gt;
  &amp;lt;span class=&amp;quot;bezel-top&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;bezel-left&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;bezel-right&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;bezel-bottom&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;figure class=&amp;quot;screen-container&amp;quot;&amp;gt;
    &amp;lt;span class=&amp;quot;screen&amp;quot;&amp;gt;
      &amp;lt;p&amp;gt;hello, Dave&amp;lt;/p&amp;gt;
      &amp;lt;span class=&amp;quot;sheen&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/span&amp;gt;
  &amp;lt;/figure&amp;gt;
  &amp;lt;figure class=&amp;quot;logo&amp;quot;&amp;gt;
    &amp;lt;span class=&amp;quot;image&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;text&amp;quot;&amp;gt;Macintosh Plus&amp;lt;/span&amp;gt;
  &amp;lt;/figure&amp;gt;
  &amp;lt;figure class=&amp;quot;floppy&amp;quot;&amp;gt;&amp;lt;/figure&amp;gt;
&amp;lt;/figure&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A working example can be found in the &lt;code&gt;examples/05-Completed&lt;/code&gt; folder.&lt;/p&gt;

&lt;h3&gt;Screen&lt;/h3&gt;

&lt;p&gt;The screen is made up of several elements, including a container, the screen itself and a &amp;ldquo;sheen&amp;rdquo; layer on top.&lt;/p&gt;

&lt;p&gt;The CSS for this makes use of CSS &lt;code&gt;gradients&lt;/code&gt; to make it look inset into the front of the computer and the sheen &lt;code&gt;span&lt;/code&gt; uses an almost-transparent gradient to give the screen some shininess.&lt;/p&gt;

&lt;h3&gt;Logo&lt;/h3&gt;

&lt;p&gt;The logo is made up of two parts, an image and some text. The image &lt;code&gt;span&lt;/code&gt; contains a background image of the old colorful Apple logo, and the text is positioned next to it. The CSS for these can be found in the source files.&lt;/p&gt;

&lt;p&gt;To create the right look, an embedded font is added. This uses the CSS &lt;code&gt;font-face&lt;/code&gt; property. There are many ways to do this, but perhaps the easiest is to use a service such as &lt;a href=&quot;http://www.fontsquirrel.com/tools/webfont-generator&quot;&gt;Font Squirrel&amp;rsquo;s @font-face generator&lt;/a&gt; to create the following CSS:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@font-face {
  font-family: &amp;quot;apple_garamondregular&amp;quot;;
  src: url(&amp;quot;../fonts/apple_garamond-webfont.eot&amp;quot;);
  src: url(&amp;quot;../fonts/apple_garamond-webfont.eot?#iefix&amp;quot;) format(&amp;quot;embedded-opentype&amp;quot;), url(&amp;quot;../fonts/apple_garamond-webfont.woff&amp;quot;) format(&amp;quot;woff&amp;quot;), url(&amp;quot;../fonts/apple_garamond-webfont.ttf&amp;quot;) format(&amp;quot;truetype&amp;quot;), url(&amp;quot;../fonts/apple_garamond-webfont.svg#apple_garamondregular&amp;quot;) format(&amp;quot;svg&amp;quot;);
  font-weight: normal;
  font-style: normal;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Font Squirrel helps by generating the various files (eot, woff, etc) that can then be placed in the project and called in within the CSS as shown.&lt;/p&gt;

&lt;p&gt;The result is a font that closely matches the original.&lt;/p&gt;

&lt;h3&gt;Floppy drive&lt;/h3&gt;

&lt;p&gt;The floppy drive is a single element, and uses CSS borders to make it look like it&amp;rsquo;s set into the front. The CSS that creates the effect looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.floppy {
  height: 0.2em;
  width: 2.8em;
  transform: translate3d(4.8em, 8.9em, 0);
  background: #555555;
  border-top: 0.1em solid #cccccc;
  border-right: 0.3em solid #e6e6e6;
  border-bottom: 0.1em solid #f2f2f2;
  border-left: 0.3em solid #e6e6e6;
  border-radius: 0.25em;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The floppy drive has a solid grey background color, and four borders. The top border is the darkest, with the bottom border being brighter to make it seem lit from above. Finally, a border-radius rounds the corners.&lt;/p&gt;

&lt;h2&gt;Putting the pieces together&lt;/h2&gt;

&lt;p&gt;Each of the pieces, when put together, look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/macplus/05-Completed.png&quot; alt=&quot;Completed Mac Plus - examples/05-Completed/index.html&quot;&gt; &lt;/p&gt;

&lt;h2&gt;Adding animation&lt;/h2&gt;

&lt;p&gt;While what we have looks pretty good, we can properly show off the fact that it&amp;rsquo;s a 3D object by making it move. To do this we&amp;rsquo;ll make use of CSS &lt;code&gt;keyframe&lt;/code&gt; animation.&lt;/p&gt;

&lt;p&gt;In CSS, there are two types of animation. &lt;code&gt;Transitions&lt;/code&gt;, in which elements on the page animate from one style or position to another, and &lt;code&gt;keyframes&lt;/code&gt;, which represent a more complex series of animated steps.&lt;/p&gt;

&lt;p&gt;A series of &lt;code&gt;keyframes&lt;/code&gt; can be described as a series of percentages, with CSS describing each step. It could look something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@keyframes back-and-forth {
  0% {
    transform: rotateY(40deg);
  }
  40%, 50% {
    transform: rotateY(-40deg);
  }
  90%, 100% {
    transform: rotateY(40deg);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example the animation is called &lt;strong&gt;back-and-forth&lt;/strong&gt;, and is made up of 3 steps. It begins rotated to an angle of 40 degrees. Then by the 40% mark, is rotated to &lt;em&gt;minus&lt;/em&gt; 40 degrees. It stays at this rotation until 50%, then at 90% has returned to the original position.&lt;/p&gt;

&lt;p&gt;The browser automatically fills in the gaps by animating the properties. In this case it will animate the angle of rotation.&lt;/p&gt;

&lt;h3&gt;Applying animation&lt;/h3&gt;

&lt;p&gt;To apply this animation we can use the CSS &lt;strong&gt;animation&lt;/strong&gt; tag.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;animation&lt;/code&gt; tag looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;animation: back-and-forth 14s ease-in-out infinite;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few things are combined into one line here. It references the animation by name (&amp;ldquo;back-and-forth&amp;rdquo;), sets a &lt;code&gt;duration&lt;/code&gt; of 14 seconds, and tells the animation to repeat indefinitely. The &lt;code&gt;ease-in-out&lt;/code&gt; value refers to &lt;code&gt;easing&lt;/code&gt;, which tells the browser to have the animation start and end gradually.&lt;/p&gt;

&lt;p&gt;Applying this animation to the &amp;ldquo;positioning&amp;rdquo; div results in something like this:&lt;/p&gt;

&lt;div class=&quot;codepen&quot; data-height=&quot;680&quot; data-type=&quot;result&quot; data-href=&quot;HGqjp&quot; data-user=&quot;donovanh&quot; data-safe=&quot;true&quot;&gt; &lt;/div&gt;

&lt;h2&gt;What we learned&lt;/h2&gt;

&lt;p&gt;In creating and animating a 3D object in CSS, we covered quite a few techniques. We set the &lt;code&gt;perspective&lt;/code&gt; and &lt;code&gt;perspective-origin&lt;/code&gt;. We then made use of &lt;code&gt;transforms&lt;/code&gt; to rotate, move and position elements, added &lt;code&gt;gradients&lt;/code&gt; to give a more realistic 3D effect, and used some CSS &lt;code&gt;border&lt;/code&gt; tricks to create bevels and depth. Finally we made use of &lt;code&gt;keyframes&lt;/code&gt; and CSS &lt;code&gt;animation&lt;/code&gt; to give the scene life.&lt;/p&gt;

&lt;h3&gt;Browser compatibility&lt;/h3&gt;

&lt;p&gt;Not all browsers can yet handle CSS transforms. Internet Explorer will struggle, but there is hope that support will be &lt;a href=&quot;http://caniuse.com/transforms3d&quot;&gt;arriving in IE 11&lt;/a&gt;. All recent versions of Chrome, Safari and Firefox will do ok. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://modernizr.com/&quot;&gt;Modernizr&lt;/a&gt; provides a set of JavaScript tools to detect browser capabilities and can be used to show alternate content in cases where the browser cannot support a certain CSS property. In the example code, you&amp;rsquo;ll find I&amp;rsquo;ve made use of Modernizr to detect the presence of 3D transforms. In cases where they don&amp;rsquo;t exist, an image is shown instead.&lt;/p&gt;

&lt;h2&gt;Going forward&lt;/h2&gt;

&lt;p&gt;While the example might not seem like something you&amp;rsquo;d use in the average web site, the techniques can be applies to all sorts of scenarios.&lt;/p&gt;

&lt;p&gt;For example, CSS transforms can be used to add depth to page transitions, image carousels, logos and buttons, to name a few. CSS animations can be used to add more interesting movement and finesse to your transitions, and CSS gradients can add depth to pages without a need to use images.&lt;/p&gt;

&lt;script src=&quot;http://codepen.io/assets/embed/ei.js&quot;&gt; &lt;/script&gt;
</content>
 </entry>
 
 <entry>
   <title>Animation Principles for the Web</title>
   <link href="https://cssanimation.rocks/principles"/>
   <updated>2015-03-21T00:00:00+00:00</updated>
   <id>https://cssanimation.rocks/principles</id>
   <content type="html">&lt;p&gt;As front-end designers and developers, we use CSS to style, position and create great looking sites. We often use CSS to add movement to pages in the form of transitions or even animations, but we don&amp;rsquo;t usually go much beyond that.&lt;/p&gt;

&lt;p&gt;Animation can be a powerful tool to help our visitors and customers understand and benefit from our designs. There are principles we can apply to our work to make the most of this power.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Long established as fundamental working practices at Disney, the &lt;a href=&quot;http://en.wikipedia.org/wiki/12_basic_principles_of_animation&quot;&gt;12 Principles of Animation&lt;/a&gt; were published as &amp;ldquo;The Illusion of Life: Disney Animation&amp;rdquo; in 1981. These principles describe how animation can be used to immerse viewers in a believable   world.&lt;/p&gt;

&lt;p&gt;In this article I&amp;rsquo;ll go through each of the 12 principles, and discuss how they might apply when making web pages. You can find the &lt;a href=&quot;http://codepen.io/collection/AxKOdY/&quot;&gt;source HTML and CSS on Codepen for them all here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Squash and stretch&lt;/h2&gt;

&lt;section class=&quot;demo-container principle principle-one&quot;&gt;
  &lt;div class=&quot;wrapper&quot;&gt;
  &lt;div class=&quot;shape&quot;&gt;&lt;/div&gt;
  &lt;div class=&quot;surface&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;This is the notion that an object has a physical mass, and when it moves this mass stays the same. A ball will widen as it hits the ground when bouncing, but also get shorter as its mass is redistributed.&lt;/p&gt;

&lt;p&gt;This is most useful when creating objects that we want to be considered physical, such as people, clocks or bouncing balls.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s possible to ignore this rule when working with elements of a web page. DOM elements aren&amp;rsquo;t necessarily associated with physical objects, and can grow or shrink on screen as needed. For example, a button could grow and morph into an information box, or error messages can appear and disappear. &lt;/p&gt;

&lt;p&gt;Still, the squash and stretch techniques can be used to give an object the feeling of physical mass. Even small changes in shape can create subtle but eye-catching effects.&lt;/p&gt;

&lt;h2&gt;Anticipation&lt;/h2&gt;

&lt;section class=&quot;demo-container principle principle-two&quot;&gt;
  &lt;div class=&quot;wrapper&quot;&gt;
  &lt;div class=&quot;shape&quot;&gt;&lt;/div&gt;
  &lt;div class=&quot;surface&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;Movements don&amp;rsquo;t tend to happen suddenly. In real life,  motion is usually preceded by some kind of build-up, whether it&amp;rsquo;s a ball beginning to roll before it falls off a table, or a person bending their knees in preparation to jump.&lt;/p&gt;

&lt;p&gt;We can use this to make our transitions and animations feel more life-like. Anticipation could be in the form of a subtle bounciness that helps people understand what is changing and keep track of the objects on-screen.&lt;/p&gt;

&lt;p&gt;For example, an element could shrink slightly before growing larger on hover; adding extra items to a list could be introduced by having other items move out of the way first.&lt;/p&gt;

&lt;h2&gt;Staging&lt;/h2&gt;

&lt;section class=&quot;demo-container principle principle-three&quot;&gt;
  &lt;div class=&quot;wrapper&quot;&gt;
  &lt;div class=&quot;shape a&quot;&gt;&lt;/div&gt;
  &lt;div class=&quot;shape b&quot;&gt;&lt;/div&gt;
  &lt;div class=&quot;shape c&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;Staging is making sure an object is the focus of a scene, when other objects or aspects of the scene make way for where the main action is taking place. This means either placing the main action in a prominent position, or masking other elements to focus on what the user needs to see.&lt;/p&gt;

&lt;p&gt;In web terms, one approach is to use a modal overlay for certain content. Adding a dark layer over the existing page and then placing the content in front stages it and shows it as the main point of focus.&lt;/p&gt;

&lt;p&gt;Another approach is to use movement. When many objects are moving, it&amp;rsquo;s hard to know which is worthy of attention. If all other movement is stopped and one object moves, even slightly, it will be much easier to spot.&lt;/p&gt;

&lt;p&gt;One technique is to make a &amp;ldquo;Save&amp;rdquo; button wobble or flash briefly to suggest to the user that they might want to save a document. With the rest of the screen held static and motionless, even subtle movement will stand out.&lt;/p&gt;

&lt;h2&gt;Straight-Ahead Action and Pose-to-Pose&lt;/h2&gt;

&lt;section class=&quot;demo-container principle principle-four&quot;&gt;
  &lt;div class=&quot;wrapper&quot;&gt;
  &lt;div class=&quot;shape a&quot;&gt;&lt;/div&gt;
  &lt;div class=&quot;shape b&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;Straight-ahead action is when every frame of an animation is drawn. Pose-to-pose is when a series of keyframes are defined and the intervals filled in later, usually by an assistant.&lt;/p&gt;

&lt;p&gt;Most web animation uses pose-to-pose animation: the transition between keyframes can be handled by the browser, which interpolates the difference between each and draws in as many frames as it can to make the animation smooth.&lt;/p&gt;

&lt;p&gt;One exception to this is the &lt;code&gt;steps&lt;/code&gt; timing function. With this function, the browser &amp;ldquo;steps&amp;rdquo; through as many discrete frames as defined. This way you could draw out a series of images and have the browser display each in sequence, creating a &amp;ldquo;Straight Ahead Action&amp;rdquo; style.&lt;/p&gt;

&lt;h2&gt;Follow Through and Overlapping Action&lt;/h2&gt;

&lt;section class=&quot;demo-container principle principle-five&quot;&gt;
  &lt;div class=&quot;wrapper&quot;&gt;
  &lt;div class=&quot;shape-container&quot;&gt;
    &lt;div class=&quot;shape&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;Things don&amp;rsquo;t always happen at the same time. When a car stops suddenly it tilts forward, with smoke from the tires and the driver inside continuing the forward motion until they are stopped or dissapate.&lt;/p&gt;

&lt;p&gt;These details are examples of follow through and overlapping action. They can be used on the web to help emphasise that something is stopping, and hasn&amp;rsquo;t merely forgotten to animate. For example, an item added to a list might be slide in, proceed slightly too far, and then correct itself to the right position.&lt;/p&gt;

&lt;p&gt;To create a feeling of overlapping action, we can make elements move at a slightly different pace to each other. It&amp;rsquo;s a technique used well in the iOS operating system when transitioning between views. Some buttons and elements move at different rates, and the combined effect is much more lifelike and less flat than if everything moved at the same rate. The combined movements give the viewer time to properly understand the change.&lt;/p&gt;

&lt;p&gt;In web terms this might mean stacking transitions or animations, creating effects that work at different speeds.&lt;/p&gt;

&lt;h2&gt;Slow In and Slow Out&lt;/h2&gt;

&lt;section class=&quot;demo-container principle principle-six&quot;&gt;
  &lt;div class=&quot;wrapper&quot;&gt;
  &lt;div class=&quot;shape a&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;Objects rarely go from a standstill to maximum speed immediately. They tend to speed up gradually and slow before stopping. Without acceleration and deceleration, movements feel robotic.&lt;/p&gt;

&lt;p&gt;In CSS terms, slow in and slow out are known as &lt;code&gt;easing&lt;/code&gt;. Easing is what is known as a timing function, a way of describing the rate of change through the course of an animation.&lt;/p&gt;

&lt;p&gt;Using timing functions, animations can start slow and speed up (ease-in), start fast and slow down (ease-out) or more complex effects using the &lt;code&gt;cubic-bezier&lt;/code&gt; timing function.&lt;/p&gt;

&lt;h2&gt;Arc&lt;/h2&gt;

&lt;section class=&quot;demo-container principle principle-sevena&quot;&gt;
  &lt;div class=&quot;wrapper&quot;&gt;
  &lt;div class=&quot;shape-container&quot;&gt;
    &lt;div class=&quot;shape a&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;While objects are more lifelike when they follow the &amp;ldquo;Slow In and Slow Out&amp;rdquo;, objects rarely move in straight lines: they tend to follow curved arcs.&lt;/p&gt;

&lt;p&gt;We can achieve arcing movements with CSS in a couple of ways. One is to combine multiple animations. A bouncing ball animation, for example could be made up a ball moving up and down, while a second moves it to the right at the same time. The ball would then arc across the screen.&lt;/p&gt;

&lt;section class=&quot;demo-container principle principle-sevenb&quot;&gt;
  &lt;div class=&quot;wrapper&quot;&gt;
  &lt;div class=&quot;shape a&quot;&gt;&lt;/div&gt;
  &lt;div class=&quot;shape b&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;Another option is to rotate an element. We can adjust an object&amp;rsquo;s center of rotation by setting its transform origin outside the element. When we  rotate the object, it will rotate in an arc.&lt;/p&gt;

&lt;h2&gt;Secondary Action&lt;/h2&gt;

&lt;section class=&quot;demo-container principle principle-eight&quot;&gt;
  &lt;div class=&quot;wrapper&quot;&gt;
  &lt;div class=&quot;shape a&quot;&gt;&lt;/div&gt;
  &lt;div class=&quot;shape b&quot;&gt;&lt;/div&gt;
  &lt;div class=&quot;shape c&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;While a primary action is taking place, a secondary animation can help emphasise or augment it. This could be the swinging arms of someone walking or the tilt of their head. Or a bouncing ball kicking up a little dust.&lt;/p&gt;

&lt;p&gt;On web sites, secondary actions could see elements moving out of the way when the main focus of attention is introduced, such as dragging an item and placing it in the middle of a list.&lt;/p&gt;

&lt;h2&gt;Timing&lt;/h2&gt;

&lt;section class=&quot;demo-container principle principle-nine&quot;&gt;
  &lt;div class=&quot;wrapper&quot;&gt;
  &lt;div class=&quot;shape a&quot;&gt;&lt;/div&gt;
  &lt;div class=&quot;shape b&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;An animation&amp;rsquo;s timing is how long it takes to complete. Timing can be used to make weighty objects look heavy in their motion, or to add character to movement.&lt;/p&gt;

&lt;p&gt;On the web this might be as simple as adjusting the &lt;code&gt;animation-duration&lt;/code&gt; or &lt;code&gt;transition-duration&lt;/code&gt; values.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s easy to let animations take longer than they need to. Adjusting timing can help get the animation out of the way of the content or interaction.&lt;/p&gt;

&lt;h2&gt;Exaggeration&lt;/h2&gt;

&lt;section class=&quot;demo-container principle principle-ten&quot;&gt;
  &lt;div class=&quot;wrapper&quot;&gt;
  &lt;div class=&quot;shape&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;Most commonly used in cartoons, exaggeration can draw attention to certain actions and make them more dramatic. A wolf making an attempt to bite might have its jaws open wider than is normal to make the effect more scary or humorous.&lt;/p&gt;

&lt;p&gt;In a web page, objects can be scaled up and down to emphasise them and draw attention. For example when filling a form, the active section could grow while the others shrink or fade.&lt;/p&gt;

&lt;h2&gt;Solid drawing&lt;/h2&gt;

&lt;section class=&quot;demo-container principle principle-eleven&quot;&gt;
  &lt;div class=&quot;wrapper&quot;&gt;
  &lt;div class=&quot;shape&quot;&gt;
    &lt;div class=&quot;container&quot;&gt;
      &lt;span class=&quot;front&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;back&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;left&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;right&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;top&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;bottom&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;When animating objects in three dimensions, care should be taken to ensure they follow the rules of perspective. People are used to living in a three dimensional world, so when objects don&amp;rsquo;t behave as expected they look wrong.&lt;/p&gt;

&lt;p&gt;Modern browsers have decent support for three dimensional transforms. This means that we can rotate and place objects in a scene and the browser can handle the transitions automatically.&lt;/p&gt;

&lt;h2&gt;Appeal&lt;/h2&gt;

&lt;section class=&quot;demo-container principle principle-twelve&quot;&gt;
  &lt;div class=&quot;wrapper&quot;&gt;
  &lt;div class=&quot;shape&quot;&gt;
    &lt;div class=&quot;container&quot;&gt;
      &lt;span class=&quot;item one&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;item two&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;item three&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;item four&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;Appeal is the character of the artwork and how it can make us connect with the intention of the artist. Like charisma in an actor, it&amp;rsquo;s the attention to detail and movement combined that creates an appealing result.&lt;/p&gt;

&lt;p&gt;Carefully crafted animations on the web can create appeal. Companies such as Stripe have made great use of animation to add credibility to their checkout process.&lt;/p&gt;

&lt;h2&gt;Try it yourself!&lt;/h2&gt;

&lt;p&gt;Making use of the other principles is a good way to improve animations. Animations that maintain the physical weight of objects, anticipate changes, make use of secondary actions and good timing will be valuable and helpful additions to your content.&lt;/p&gt;

&lt;p&gt;When you have the chance to add some animation to your pages, making use of one or more of these principles will make them more effective and appealing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update: Many thanks &lt;a href=&quot;https://twitter.com/ethonlau&quot;&gt;Ethon Lau&lt;/a&gt; to for translating this article &lt;a href=&quot;http://www.jianshu.com/p/1858a8733ba3&quot;&gt;into Chinese&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you&amp;rsquo;d like to translate this or any article into another language, &lt;a href=&quot;mailto:hello@cssanimation.rocks&quot;&gt;let me know&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Apple Watch Dials</title>
   <link href="https://cssanimation.rocks/watch"/>
   <updated>2015-03-09T00:00:00+00:00</updated>
   <id>https://cssanimation.rocks/watch</id>
   <content type="html">&lt;p&gt;With the announcement of Apple&amp;rsquo;s new watch this week, I thought I&amp;rsquo;d take a look at creating the activity dials using CSS.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In this post we&amp;rsquo;ll make use of CSS keyframe animations and a bit of &lt;code&gt;overflow&lt;/code&gt; trickery to create the radial progress bars shown in the activities section of Apple&amp;rsquo;s new watch.&lt;/p&gt;

&lt;h2&gt;Demo&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s an example of the final effect.&lt;/p&gt;

&lt;section class=&quot;demo-container watch-container&quot;&gt;
  &lt;article class=&quot;watch&quot;&gt;
    &lt;div class=&quot;bg-image&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;screen&quot;&gt;
      &lt;header&gt;
        &lt;span class=&quot;title&quot;&gt;Activity&lt;/span&gt;
        &lt;span class=&quot;time&quot;&gt;10:09&lt;/span&gt;
      &lt;/header&gt;
      &lt;section class=&quot;dials&quot;&gt;
        &lt;div class=&quot;dial move&quot;&gt;
          &lt;div class=&quot;dial-background one&quot;&gt;&lt;/div&gt;
          &lt;div class=&quot;dial-container container1&quot;&gt;
            &lt;div class=&quot;wedge&quot;&gt;&lt;/div&gt;
          &lt;/div&gt;
          &lt;div class=&quot;dial-container container2&quot;&gt;
            &lt;div class=&quot;wedge&quot;&gt;&lt;/div&gt;
          &lt;/div&gt;
          &lt;div class=&quot;marker start&quot;&gt;&lt;/div&gt;
          &lt;div class=&quot;marker end&quot;&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;dial exercise&quot;&gt;
          &lt;div class=&quot;dial-background two&quot;&gt;&lt;/div&gt;
          &lt;div class=&quot;dial-container container1&quot;&gt;
            &lt;div class=&quot;wedge&quot;&gt;&lt;/div&gt;
          &lt;/div&gt;
          &lt;div class=&quot;marker start&quot;&gt;&lt;/div&gt;
          &lt;div class=&quot;marker end&quot;&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;dial stand&quot;&gt;
          &lt;div class=&quot;dial-background three&quot;&gt;&lt;/div&gt;
          &lt;div class=&quot;dial-container container1&quot;&gt;
            &lt;div class=&quot;wedge&quot;&gt;&lt;/div&gt;
          &lt;/div&gt;
          &lt;div class=&quot;marker start&quot;&gt;&lt;/div&gt;
          &lt;div class=&quot;marker end&quot;&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/section&gt;
      &lt;section class=&quot;pips&quot;&gt;
        &lt;div&gt;&lt;/div&gt;
        &lt;div&gt;&lt;/div&gt;
        &lt;div&gt;&lt;/div&gt;
        &lt;div&gt;&lt;/div&gt;
      &lt;/section&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/section&gt;

&lt;h2&gt;Radial progress bars&lt;/h2&gt;

&lt;p&gt;The watch&amp;rsquo;s activity display is made up of 3 dials. Each is a kind of progress bar, shaped to curve around a circle. It&amp;rsquo;s a little tricky to create this shape, but it can be done using two wedges and some carefully timed animation.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll begin with a simple half-circle wedge shape.&lt;/p&gt;

&lt;section class=&quot;demo-container&quot;&gt;
  &lt;div class=&quot;example example0&quot;&gt;
    &lt;div class=&quot;wedge&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;Here&amp;rsquo;s the HTML for this wedge:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;div class=&amp;quot;dial-container&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;wedge&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We set up the wedge to be a half-moon shape using the &lt;code&gt;border-radius&lt;/code&gt; property and rotate it using a &lt;code&gt;keyframe&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.wedge {
  animation: rotate 4s infinite linear;
  border-radius: 0 4em 4em 0;
  background: red;
  width: 2em;
  height: 4em;
  transform-origin: 0% 50%;
}

@keyframes rotate {
  100% {
    transform: rotateZ(360deg);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Masking&lt;/h2&gt;

&lt;p&gt;In earlier experiments, I&amp;rsquo;d tried creating this effect using the CSS &lt;code&gt;clip&lt;/code&gt; property. This did work in some browsers, but it&amp;rsquo;s a deprecated property and tricky to use. Instead, we can create a similar effect by using &lt;code&gt;overflow: hidden&lt;/code&gt; on the container.&lt;/p&gt;

&lt;p&gt;There are two elements in play here. The &lt;code&gt;dial-container&lt;/code&gt; is half as wide as the &lt;code&gt;wedge&lt;/code&gt;, and has it&amp;rsquo;s &lt;code&gt;overflow&lt;/code&gt; property set to &lt;code&gt;hidden&lt;/code&gt;. By placing it outside the container, we can rotate it into view.&lt;/p&gt;

&lt;section class=&quot;demo-container&quot;&gt;
  &lt;div class=&quot;example example1&quot;&gt;
    &lt;div class=&quot;wedge&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.dial-container {
  position: absolute;
  top: 0;
  left: 2em;
  width: 2em;
  height: 4em;
  overflow: hidden;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The container is positioned to the right of where the wedge is positioned, and the wedge is then rotated into view.&lt;/p&gt;

&lt;p&gt;To create the full circle we need to create a second wedge. We can create this by creating a second container, placed on the left and rotating a wedge into it from the right.&lt;/p&gt;

&lt;section class=&quot;demo-container&quot;&gt;
  &lt;div class=&quot;example example2&quot;&gt;
    &lt;div class=&quot;wedge&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;We can then put these together and create a circular dial. We&amp;rsquo;ll also add some animation to have the second half of the dial start moving after the first dial.&lt;/p&gt;

&lt;h2&gt;Full circle&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s the HTML for these two parts. I&amp;rsquo;ve added a wrapper so that I can position both the containers on top of each other.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;div class=&amp;quot;wrapper&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;dial-container container1&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;wedge&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;dial-container container2&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;wedge&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the CSS to handle the wrapper, containers and the two wedges.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.wrapper {
  position: absolute;
  width: 4em;
  height: 4em;
  left: calc(50% - 2em);
}
.dial-container {
  position: absolute;
  top: 0;
  bottom: 0;
  overflow: hidden;
  width: 2em;
}
.wedge {
  background: red;
  height: 4em;
  width: 2em;
}
.container1 {
  left: 2em;
}
.container1 .wedge {
  animation: rotate-bg-1 4s infinite linear;
  border-radius: 0 4em 4em 0;
  left: 0;
  transform-origin: 0 50%;
}
.container2 {
  left: 0;
}
.container2 .wedge {
  animation: rotate-bg-2 4s infinite linear;
  border-radius: 4em 0 0 4em;
  transform-origin: 2em 2em;
}
/* First animation moves 180 degrees in the first 2 seconds */
@keyframes rotate-bg-1 {
  50%, 100% {
    transform: rotateZ(180deg);
  }
}
/* Second animation moves 180 degrees in the last 2 seconds */
@keyframes rotate-bg-2 {
  0%, 50% {
    transform: rotateZ(0);
  }
  100% {
    transform: rotateZ(180deg);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result should look like this:&lt;/p&gt;

&lt;section class=&quot;demo-container&quot;&gt;
  &lt;div class=&quot;example example3&quot;&gt;
    &lt;div class=&quot;dial-container container1&quot;&gt;
      &lt;div class=&quot;wedge&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;dial-container container2&quot;&gt;
      &lt;div class=&quot;wedge&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;h2&gt;Progress&lt;/h2&gt;

&lt;p&gt;The next step is to make the wedge into a bar. We can do this by masking the middle. Adding a circular &lt;a href=&quot;/pseudo-elements/&quot;&gt;pseudo-element&lt;/a&gt; to a container, set to the background colour, has the desired effect.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;div class=&amp;quot;wrapper&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;dial-container container1&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;wedge&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;dial-container container2&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;wedge&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.wrapper::after {
  content: &amp;quot;&amp;quot;;
  background: #fff;
  border-radius: 50%;
  width: 3em;
  height: 3em;
  position: absolute;
  top: 0.5em;
  left: 0.5em;
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We now have something that looks more like Apple&amp;rsquo;s activity radial progress bars.&lt;/p&gt;

&lt;section class=&quot;demo-container&quot;&gt;
  &lt;div class=&quot;example example4&quot;&gt;
    &lt;div class=&quot;dial-container container1&quot;&gt;
      &lt;div class=&quot;wedge&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;dial-container container2&quot;&gt;
      &lt;div class=&quot;wedge&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;h2&gt;Rounding the edges&lt;/h2&gt;

&lt;p&gt;The Apple Watch demo features nicely rounded ends on its progress bars. To recreate this we&amp;rsquo;ll add and animate some elements on each end of the bar. To begin we add the extra elements.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;div class=&amp;quot;wrapper&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;dial-container container1&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;wedge&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;dial-container container2&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;wedge&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;marker start&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;marker end&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;start&lt;/code&gt; marker will remain at the beginning, and the &lt;code&gt;end&lt;/code&gt; marker needs to be animated to keep pace with the front of the progress bar. We can handle that with some CSS.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.marker {
  background: green;
  border-radius: 50%;
  height: 0.5em;
  width: 0.5em;
  position: absolute;
  top: 0;
  left: calc(50% - 0.25em);
}
.end {
  animation: rotate-marker 4s infinite linear;
  transform-origin: 50% 2em;
}
@keyframes rotate-marker {
  100% {
    transform: rotateZ(360deg);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This CSS sets up the two markers to be green circles, and positions them at the top middle of the screen. The &lt;code&gt;end&lt;/code&gt; marker then gets the &lt;code&gt;rotate-marker&lt;/code&gt; animation and has its &lt;code&gt;transform-origin&lt;/code&gt; set to the centre of the container. This means than when it rotates, it will spin around an arc.&lt;/p&gt;

&lt;section class=&quot;demo-container&quot;&gt;
  &lt;div class=&quot;example example5&quot;&gt;
    &lt;div class=&quot;dial-container container1&quot;&gt;
      &lt;div class=&quot;wedge&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;dial-container container2&quot;&gt;
      &lt;div class=&quot;wedge&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;marker start&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;marker end&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;p&gt;Changing the colour of the markers to red lets them blend in with the bar and give it a rounded effect. Adding a little cubic-bezier tweaking to the animation can give it a bit more character also.&lt;/p&gt;

&lt;section class=&quot;demo-container&quot;&gt;
  &lt;div class=&quot;example example6&quot;&gt;
    &lt;div class=&quot;dial-container container1&quot;&gt;
      &lt;div class=&quot;wedge&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;dial-container container2&quot;&gt;
      &lt;div class=&quot;wedge&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;marker start&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;marker end&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;h2&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;Three of these radial progress bars together creates the Apple Watch activity dials. If you want to see more of this code, a full demo &lt;a href=&quot;http://codepen.io/donovanh/full/GgYEBZ/&quot;&gt;is available on Codepen&lt;/a&gt;.&lt;/p&gt;

&lt;section class=&quot;demo-container watch-container&quot;&gt;
  &lt;article class=&quot;watch&quot;&gt;
    &lt;div class=&quot;bg-image&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;screen&quot;&gt;
      &lt;header&gt;
        &lt;span class=&quot;title&quot;&gt;Activity&lt;/span&gt;
        &lt;span class=&quot;time&quot;&gt;10:09&lt;/span&gt;
      &lt;/header&gt;
      &lt;section class=&quot;dials&quot;&gt;
        &lt;div class=&quot;dial move&quot;&gt;
          &lt;div class=&quot;dial-background one&quot;&gt;&lt;/div&gt;
          &lt;div class=&quot;dial-container container1&quot;&gt;
            &lt;div class=&quot;wedge&quot;&gt;&lt;/div&gt;
          &lt;/div&gt;
          &lt;div class=&quot;dial-container container2&quot;&gt;
            &lt;div class=&quot;wedge&quot;&gt;&lt;/div&gt;
          &lt;/div&gt;
          &lt;div class=&quot;marker start&quot;&gt;&lt;/div&gt;
          &lt;div class=&quot;marker end&quot;&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;dial exercise&quot;&gt;
          &lt;div class=&quot;dial-background two&quot;&gt;&lt;/div&gt;
          &lt;div class=&quot;dial-container container1&quot;&gt;
            &lt;div class=&quot;wedge&quot;&gt;&lt;/div&gt;
          &lt;/div&gt;
          &lt;div class=&quot;marker start&quot;&gt;&lt;/div&gt;
          &lt;div class=&quot;marker end&quot;&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;dial stand&quot;&gt;
          &lt;div class=&quot;dial-background three&quot;&gt;&lt;/div&gt;
          &lt;div class=&quot;dial-container container1&quot;&gt;
            &lt;div class=&quot;wedge&quot;&gt;&lt;/div&gt;
          &lt;/div&gt;
          &lt;div class=&quot;marker start&quot;&gt;&lt;/div&gt;
          &lt;div class=&quot;marker end&quot;&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/section&gt;
      &lt;section class=&quot;pips&quot;&gt;
        &lt;div&gt;&lt;/div&gt;
        &lt;div&gt;&lt;/div&gt;
        &lt;div&gt;&lt;/div&gt;
        &lt;div&gt;&lt;/div&gt;
      &lt;/section&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/section&gt;
</content>
 </entry>
 
 <entry>
   <title>Transitions vs Animations</title>
   <link href="https://cssanimation.rocks/transition-vs-animation"/>
   <updated>2015-03-04T00:00:00+00:00</updated>
   <id>https://cssanimation.rocks/transition-vs-animation</id>
   <content type="html">&lt;p&gt;When animating on the web, do you use a transition or an animation? There are times when you would want to choose one over the other. Let&amp;rsquo;s discuss the differences.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;What are Transitions?&lt;/h2&gt;

&lt;p&gt;A transition occurs when an element changes from one state to another, and the browser fills in that state change with a sequence of in-between frames. It has a beginning and an end state.&lt;/p&gt;

&lt;p&gt;We most often see transitions used on hover states, or when information on a page is added or removed. The hover states might be a subtle change in font color, and information on the page might fade from invisible to visible.&lt;/p&gt;

&lt;p&gt;Since transitions are limited to these two stages, they can lack the nuance of animations but at the same time be easier to use.&lt;/p&gt;

&lt;h3&gt;When to use them&lt;/h3&gt;

&lt;p&gt;If you want to change an element from one state to another smoothly, a transition is a good choice. Simple changes can usually be handled with transitions and timing functions can be used to customize the way the transition occurs.&lt;/p&gt;

&lt;p&gt;A transition would work well when someone hovers or taps a button:&lt;/p&gt;

&lt;section class=&quot;shiny demo-container tap-to-activate&quot;&gt;
  &lt;button&gt;Shiny effect&lt;/button&gt;
&lt;/section&gt;

&lt;p&gt;Or when an item is added to a page:&lt;/p&gt;

&lt;section class=&quot;add-to-list swing demo-container&quot;&gt;
  &lt;ul&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #d13c9e;&quot;&gt;A list item&lt;/li&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #3cd19e;&quot;&gt;A list item&lt;/li&gt;
  &lt;/ul&gt;
  &lt;button&gt;Add a list item&lt;/button&gt;
&lt;/section&gt;

&lt;h2&gt;What are Animations?&lt;/h2&gt;

&lt;p&gt;CSS Animations are a more powerful alternative to transitions. Rather than rely on a change from one beginning state to an end state, animations can be made up of as many in-between states as you like, and offer more control over how the states are animated.&lt;/p&gt;

&lt;p&gt;Where a transition only goes from A to B, an animation can go from A, B, C to D. Or any number of stages as needed.&lt;/p&gt;

&lt;p&gt;Animations achieve this by using sets of &lt;code&gt;keyframes&lt;/code&gt;. Where a transition can be specified with one line in the class, an animation works by referencing a set of keyframes that are described separately in the CSS.&lt;/p&gt;

&lt;h3&gt;When to use them&lt;/h3&gt;

&lt;p&gt;If an animation needs to run when the page loads, or is more complex than a simple A to B state change, a CSS animation might be more appropriate.&lt;/p&gt;

&lt;p&gt;Examples of this might be if you want to have an animation on the page that plays after a certain amount of time, like this blink effect on this Baymax character:&lt;/p&gt;

&lt;section class=&quot;demo-container baymax-container&quot;&gt;
  &lt;a href=&quot;http://codepen.io/donovanh/full/ZYaMjw/&quot; class=&quot;baymax&quot;&gt;&lt;/a&gt;
&lt;/section&gt;

&lt;p&gt;An animation might also be a good choice if an item has to move across multiple places on the page, such as an instruction overlay with a mouse cursor point out various areas of interest on a screen.&lt;/p&gt;

&lt;h2&gt;Sometimes it&amp;rsquo;s not obvious&lt;/h2&gt;

&lt;p&gt;A recent post began as an animation, but then became a case for transitions.&lt;/p&gt;

&lt;div class=&quot;demo-container clocks single local bounce&quot;&gt;
  &lt;article class=&quot;clock station&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;p&gt;When I began designing this clock, I had the hands move continuously on load. This was a good case for using the &lt;code&gt;animation&lt;/code&gt; property. It was to animate on load and continue forever. When I started adding more complexity, I found it made more sense to have the hands&amp;rsquo; angles set using JavaScript.&lt;/p&gt;

&lt;p&gt;As the hands were being moved by JavaScript, &lt;code&gt;transitions&lt;/code&gt; became a better choice. When the JavaScript changes the angle of a hand, the CSS &lt;code&gt;transition&lt;/code&gt; handles the change (from state A to state B) more elegantly than an animation would.&lt;/p&gt;

&lt;p&gt;Check out this &lt;a href=&quot;/clocks/&quot;&gt;CSS clock tutorial&lt;/a&gt; for more detail.&lt;/p&gt;

&lt;h2&gt;In summary&lt;/h2&gt;

&lt;p&gt;Transitions for creating a smooth transition from one state to another, and animations for more complex series of movements.&lt;/p&gt;

&lt;p&gt;Transitions are generally easier to create and manage, and apply to the majority of situations. If you need more control over animating an element through a series of steps, or if the animation needs to begin on load, then an animation with keyframes might be the better choice.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Clocks</title>
   <link href="https://cssanimation.rocks/clocks"/>
   <updated>2015-02-25T00:00:00+00:00</updated>
   <id>https://cssanimation.rocks/clocks</id>
   <content type="html">&lt;p&gt;It&amp;rsquo;s about time. In this article we&amp;rsquo;ll take on the challenge of creating and animating a clock, using simple CSS animations as well as JavaScript to trigger them.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This is the clock we&amp;rsquo;ll create using HTML, CSS, an SVG background and a little JavaScript. We&amp;rsquo;ll use CSS animations or transitions for any movement, and rely on JavaScript to set the initial time and adding basic CSS transforms.&lt;/p&gt;

&lt;div class=&quot;demo-container clocks single local bounce&quot;&gt;
  &lt;article class=&quot;clock simple&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;h3&gt;HTML&lt;/h3&gt;

&lt;p&gt;To get started we&amp;rsquo;ll need some HTML. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;article class=&amp;quot;clock&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;hours-container&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;hours&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;minutes-container&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;minutes&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;seconds-container&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;seconds&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My initial approach was to use three elements for each of the hands. I then went back and wrapped each in a container element. While the simpler HTML worked as far as the basic CSS animations, we&amp;rsquo;ll need containing elements when we want to position the hands and  animate them also.&lt;/p&gt;

&lt;h2&gt;Clock face&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll begin with a basic clock design has a round face, with simple hours, minutes and seconds hands.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.clock {
  border-radius: 50%;
  background: #fff url(/assets/images/posts/clocks/ios_clock.svg) no-repeat center;
  background-size: 88%;
  height: 20em;
  padding-bottom: 31%;
  position: relative;
  width: 20em;
}

.clock.simple:after {
  background: #000;
  border-radius: 50%;
  content: &amp;quot;&amp;quot;;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  width: 5%;
  height: 5%;
  z-index: 10;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can &lt;a href=&quot;/assets/images/posts/clocks/ios_clock.svg&quot;&gt;get the SVG background here&lt;/a&gt;. I&amp;rsquo;ve also added a pseudo-element to add a solid black circle to the center. The hands of the clock can then be placed behind this pseudo-element as needed.&lt;/p&gt;

&lt;p&gt;We should now have something like this.&lt;/p&gt;

&lt;div class=&quot;demo-container clocks single&quot;&gt;
  &lt;article class=&quot;clock simple&quot;&gt;&lt;/article&gt;
&lt;/div&gt;

&lt;p&gt;Before adding the hands, we need to place the containers.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.minutes-container, .hours-container, .seconds-container {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This stacks each container on top of the clock. Next we create the hands.&lt;/p&gt;

&lt;h3&gt;Hour hand&lt;/h3&gt;

&lt;p&gt;Each hand is given the position property of &lt;code&gt;absolute&lt;/code&gt; and placed in the twelve o&amp;#39;clock position. We&amp;rsquo;ll begin with the hour hand.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.hours {
  background: #000;
  height: 20%;
  left: 48.75%;
  position: absolute;
  top: 30%;
  transform-origin: 50% 100%;
  width: 2.5%;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;m using percentages to make scaling the clocks easier. It&amp;rsquo;s a bit more work but makes it easier to have them fit the view or shrink down for mobiles. We also set the &lt;code&gt;transform-origin&lt;/code&gt; property to the bottom of the hand so that it can be rotated later.&lt;/p&gt;

&lt;div class=&quot;demo-container clocks single&quot;&gt;
  &lt;article class=&quot;clock simple&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;h3&gt;Minute hand&lt;/h3&gt;

&lt;p&gt;The minute hand is similar, but taller and thinner.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.minutes {
  background: #000;
  height: 40%;
  left: 49%;
  position: absolute;
  top: 10%;
  transform-origin: 50% 100%;
  width: 2%;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;demo-container clocks single&quot;&gt;
  &lt;article class=&quot;clock simple&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;h3&gt;Second hand&lt;/h3&gt;

&lt;p&gt;The second hand is thinner again, but also set further down so that it extends further than the center. To allow for this the &lt;code&gt;transform-origin&lt;/code&gt; to 80%. This leaves 20% of the hand extending past the center.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.seconds {
  background: #000;
  height: 45%;
  left: 49.5%;
  position: absolute;
  top: 14%;
  transform-origin: 50% 80%;
  width: 1%;
  z-index: 8;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;demo-container clocks single&quot;&gt;
  &lt;article class=&quot;clock simple&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;h3&gt;Animation&lt;/h3&gt;

&lt;p&gt;A stopped clock is only going to be right twice a day. Let&amp;rsquo;s add some animations to make the clock behave more like the real thing.&lt;/p&gt;

&lt;p&gt;Some clocks jump along with each second, usually making a ticking sound. Some clocks purr along with the hands moving smoothly. We&amp;rsquo;ll try both. First, we&amp;rsquo;ll make the hands move smoothly.&lt;/p&gt;

&lt;p&gt;We can use one &lt;code&gt;keyframe&lt;/code&gt; to tell the hands to move around 360 degrees (the 0% starting position is implied).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@keyframes rotate {
  100% {
    transform: rotateZ(360deg);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This keyframe tells the element to animate around 360 degrees, if applied to the element using the &lt;code&gt;animation&lt;/code&gt; property. We&amp;rsquo;ll use a &lt;code&gt;linear&lt;/code&gt; timing function on the hand to make the hands move smoothly.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.hours-container {
  animation: rotate 43200s infinite linear;
}
.minutes-container {
  animation: rotate 3600s infinite linear;
}
.seconds-container {
  animation: rotate 60s infinite linear;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;hours&lt;/code&gt; hand is set to rotate once every 12 hours (43,200 seconds). The minute hand rotates once per hour, and the second hand once every minute.&lt;/p&gt;

&lt;p&gt;Put it together and we now have movement!&lt;/p&gt;

&lt;div class=&quot;demo-container clocks single linear&quot;&gt;
  &lt;article class=&quot;clock simple&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;p&gt;If you are very sharp-eyed, you might be able to even make out the minute hand moving. It would take an hour for it to complete a rotation, and twelve hours for the hour hand to complete it&amp;rsquo;s circuit.&lt;/p&gt;

&lt;p&gt;The second hand takes 60 seconds, so it easier to notice.&lt;/p&gt;

&lt;h3&gt;Adding steps&lt;/h3&gt;

&lt;p&gt;We can make the hands behave more like a normal clock by having the second hand move around the clock in 60 separate movements. A simple way to achieve this is using the &lt;code&gt;steps&lt;/code&gt; timing function. The &lt;code&gt;animation&lt;/code&gt; property for each hand them becomes:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.minutes-container {
  animation: rotate 3600s infinite steps(60);
}
.seconds-container {
  animation: rotate 60s infinite steps(60);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both the minute and seconds hand now move around in sixty steps. The browser automatically calculates how far each of these 60 steps move. &lt;/p&gt;

&lt;div class=&quot;demo-container clocks single steps&quot;&gt;
  &lt;article class=&quot;clock simple&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;h3&gt;The correct time&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s all very well having the time look good, but how about being accurate? With a little JavaScript we can have the time be correct for our visitors. Here&amp;rsquo;s the code.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/*
 * Starts any clocks using the user&amp;#39;s local time
 * From: cssanimation.rocks/clocks
 */
function initLocalClocks() {
  // Get the local time using JS
  var date = new Date;
  var seconds = date.getSeconds();
  var minutes = date.getMinutes();
  var hours = date.getHours();

  // Create an object with each hand and it&amp;#39;s angle in degrees
  var hands = [
    {
      hand: &amp;#39;hours&amp;#39;,
      angle: (hours * 30) + (minutes / 2)
    },
    {
      hand: &amp;#39;minutes&amp;#39;,
      angle: (minutes * 6)
    },
    {
      hand: &amp;#39;seconds&amp;#39;,
      angle: (seconds * 6)
    }
  ];
  // Loop through each of these hands to set their angle
  for (var j = 0; j &amp;lt; hands.length; j++) {
    var elements = document.querySelectorAll(&amp;#39;.&amp;#39; + hands[j].hand);
    for (var k = 0; k &amp;lt; elements.length; k++) {
        elements[k].style.webkitTransform = &amp;#39;rotateZ(&amp;#39;+ hands[j].angle +&amp;#39;deg)&amp;#39;;
        elements[k].style.transform = &amp;#39;rotateZ(&amp;#39;+ hands[j].angle +&amp;#39;deg)&amp;#39;;
        // If this is a minute hand, note the seconds position (to calculate minute position later)
        if (hands[j].hand === &amp;#39;minutes&amp;#39;) {
          elements[k].parentNode.setAttribute(&amp;#39;data-second-angle&amp;#39;, hands[j + 1].angle);
        }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function converts the time (hours, minutes and seconds) into the corresponding angle for each hand. It then loops through each hand and applies that angle using the &lt;code&gt;style.transform&lt;/code&gt; property of &lt;code&gt;rotateZ&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This will work on most browsers, except Safari or other browsers needing a prefix. To allow for this we also use the &lt;code&gt;style.webkitTransform&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;This then sets the clock to the current system time.&lt;/p&gt;

&lt;div class=&quot;demo-container clocks single steps local no-bounce&quot;&gt;
  &lt;article class=&quot;clock simple&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;h3&gt;Aligning second and minute hands&lt;/h3&gt;

&lt;p&gt;We need to make sure that the minute hand moves when the second hand hits the twelve o&amp;#39;clock position.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/clocks/twelve.gif&quot; alt=&quot;Minute hand moving when second hand hits 12&quot; style=&quot;max-width: 180px&quot;&gt;&lt;/p&gt;

&lt;p&gt;When the clock is first drawn on screen there is less than one minute before the minute hand needs to move. To allow for this, we can calculate how long until this first minute ends and manually nudge the hand along. Since we&amp;rsquo;re using JavaScript to make this first movement, we can continue rotating it by six degrees every minute using &lt;code&gt;setInterval&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before we move the minute hand we need to communicate how far into the current minute we are. You may have noticed these lines.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if (degrees[j].hand === &amp;#39;minutes&amp;#39;) {
  elements[k].parentNode.setAttribute(&amp;#39;data-second-angle&amp;#39;, degrees[j + 1].degree);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These extra lines check to see if the hand is the &amp;ldquo;minutes&amp;rdquo; hand, and if so, sets a data attribute with the current angle of the seconds hand.&lt;/p&gt;

&lt;p&gt;With this data attribute set, we can then use this data to work out when to move the minute hand.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/*
 * Set a timeout for the first minute hand movement (less than 1 minute), then rotate it every minute after that
 */
function setUpMinuteHands() {
  // Find out how far into the minute we are
  var containers = document.querySelectorAll(&amp;#39;.minutes-container&amp;#39;);
  var secondAngle = containers[0].getAttribute(&amp;quot;data-second-angle&amp;quot;);
  if (secondAngle &amp;gt; 0) {
    // Set a timeout until the end of the current minute, to move the hand
    var delay = (((360 - secondAngle) / 6) + 0.1) * 1000;
    setTimeout(function() {
      moveMinuteHands(containers);
    }, delay);
  }
}

/*
 * Do the first minute&amp;#39;s rotation
 */
function moveMinuteHands(containers) {
  for (var i = 0; i &amp;lt; containers.length; i++) {
    containers[i].style.webkitTransform = &amp;#39;rotateZ(6deg)&amp;#39;;
    containers[i].style.transform = &amp;#39;rotateZ(6deg)&amp;#39;;
  }
  // Then continue with a 60 second interval
  setInterval(function() {
    for (var i = 0; i &amp;lt; containers.length; i++) {
      if (containers[i].angle === undefined) {
        containers[i].angle = 12;
      } else {
        containers[i].angle += 6;
      }
      containers[i].style.webkitTransform = &amp;#39;rotateZ(&amp;#39;+ containers[i].angle +&amp;#39;deg)&amp;#39;;
      containers[i].style.transform = &amp;#39;rotateZ(&amp;#39;+ containers[i].angle +&amp;#39;deg)&amp;#39;;
    }
  }, 60000);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Adding bounce&lt;/h3&gt;

&lt;p&gt;Since we&amp;rsquo;re now using JavaScript to move the minute hand, we should remove the animation property. Rather than simply remove it, we can replace it with a transition. This is an opportunity to add a bit more character to the animation.&lt;/p&gt;

&lt;p&gt;When the JavaScript sets a new angle for the hand, a CSS transition on the element will tell the browser to animate this new position. This means that the JavaScript only deals with the simple angle changes and the browser can take care of animating it.&lt;/p&gt;

&lt;p&gt;Before we do that, we should update the code to use JavaScript to move the seconds hand also. Let&amp;rsquo;s use this code to animate the seconds hands containers sixty times per minute.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/*
 * Move the second containers
 */
function moveSecondHands() {
  var containers = document.querySelectorAll(&amp;#39;.seconds-container&amp;#39;);
  setInterval(function() {
    for (var i = 0; i &amp;lt; containers.length; i++) {
      if (containers[i].angle === undefined) {
        containers[i].angle = 6;
      } else {
        containers[i].angle += 6;
      }
      containers[i].style.webkitTransform = &amp;#39;rotateZ(&amp;#39;+ containers[i].angle +&amp;#39;deg)&amp;#39;;
      containers[i].style.transform = &amp;#39;rotateZ(&amp;#39;+ containers[i].angle +&amp;#39;deg)&amp;#39;;
    }
  }, 1000);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With both the seconds and minute hands handled by JavaScript, update the CSS to replace the &lt;code&gt;animation&lt;/code&gt; properties with &lt;code&gt;transitions&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.minutes-container {
  transition: transform 0.3s cubic-bezier(.4,2.08,.55,.44);
}
.seconds-container {
  transition: transform 0.2s cubic-bezier(.4,2.08,.55,.44);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These transitions apply to the &lt;code&gt;transform&lt;/code&gt; property and use the &lt;code&gt;cubic-bezier&lt;/code&gt; timing function. This timing function gives the hands some bounce.&lt;/p&gt;

&lt;div class=&quot;demo-container clocks single local bounce&quot;&gt;
  &lt;article class=&quot;clock simple&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;h3&gt;iOS 7 Style&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m a big fan of the simplicity of the clock used in Apple&amp;rsquo;s iOS 7. They&amp;rsquo;ve since elongated the hands, but I prefer the shorter version.&lt;/p&gt;

&lt;p&gt;By styling the hands and adding a background image with the numbers, we can easily create this look.&lt;/p&gt;

&lt;div class=&quot;demo-container clocks single local bounce&quot;&gt;
  &lt;article class=&quot;clock ios7&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;p&gt;This design is itself an evolution of the &lt;a href=&quot;https://www.youtube.com/watch?v=IvIvKiDWDks&quot;&gt;Swiss Railway Clock&lt;/a&gt; by Hans Hilfiker. By changing a few styles and adding a new background image we can adapt our clock to this style.&lt;/p&gt;

&lt;div class=&quot;demo-container clocks single local bounce&quot;&gt;
  &lt;article class=&quot;clock station&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;p&gt;If you come up with other designs, do &lt;a href=&quot;mailto:hello@cssanimation.rocks&quot;&gt;let me know&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Using Moment.js&lt;/h2&gt;

&lt;p&gt;One of my first ideas when planning this post was to recreate the hotel clocks scene, with three clocks showing different time zones.&lt;/p&gt;

&lt;p&gt;The easiest way to adjust for different time zones is by using the amazing &lt;a href=&quot;http://momentjs.com/timezone/&quot;&gt;Moment.js Timezone&lt;/a&gt; library.&lt;/p&gt;

&lt;div class=&quot;demo-container clocks multiple active bounce&quot;&gt;
  &lt;article class=&quot;clock station js-new-york&quot;&gt;
    &lt;div class=&quot;label&quot;&gt;New York&lt;/div&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
  &lt;article class=&quot;clock station js-london&quot;&gt;
    &lt;div class=&quot;label&quot;&gt;London&lt;/div&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
  &lt;article class=&quot;clock station js-tokyo&quot;&gt;
    &lt;div class=&quot;label&quot;&gt;Tokyo&lt;/div&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;p&gt;You can see the code in action &lt;a href=&quot;http://codepen.io/donovanh/full/vEjywy/&quot;&gt;on this Codepen&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Browser compatibility&lt;/h2&gt;

&lt;p&gt;Modern browsers can handle the CSS transitions and animations involved. IE10+, recent Chrome and Firefox support them without prefixes, and Safari requires the &lt;code&gt;-webkit&lt;/code&gt; prefix.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t forget to use the prefixed properties within JavaScript too.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Baymax in CSS</title>
   <link href="https://cssanimation.rocks/baymax"/>
   <updated>2015-02-18T00:00:00+00:00</updated>
   <id>https://cssanimation.rocks/baymax</id>
   <content type="html">&lt;p&gt;Let&amp;rsquo;s use CSS to create the Baymax character from the movie Big Hero 6.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In this post we&amp;rsquo;ll be animating a background image, as well as a subtle animation timing effect, and make a CSS demo out of one single HTML element.&lt;/p&gt;

&lt;section class=&quot;demo-container baymax-container&quot;&gt;
  &lt;a href=&quot;http://codepen.io/donovanh/full/ZYaMjw/&quot; class=&quot;baymax&quot;&gt;&lt;/a&gt;
&lt;/section&gt;

&lt;p&gt;You can &lt;a href=&quot;http://codepen.io/donovanh/full/ZYaMjw/&quot;&gt;see it full screen here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Single element&lt;/h2&gt;

&lt;p&gt;By making use of pseudo-elements, we&amp;rsquo;ll be able to create the face parts using one HTML element. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;div class=&amp;quot;baymax&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Styling&lt;/h2&gt;

&lt;p&gt;To set the stage we&amp;rsquo;ll add a subtle gradient to the screen to make it look like a curved, white head. For this we&amp;rsquo;ll use a radial gradient on the &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;body {
  background: radial-gradient(center, #fff, #fff 50%, #aaa);
  background-size: 100%;
  background-repeat: no-repeat;
  height: 100vh;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we position the face in the centre of the page. The mouth is a simple black line, and we&amp;rsquo;ll create that using a border.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.baymax {
  border-bottom: 1.5em solid #000;
  position: absolute;
  top: 50%;
  left: 50%;
  width: 50%;
  transform: translate(-50%, -40%);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first property sets a black border of width &lt;code&gt;1.5em&lt;/code&gt;. It then positions the line using absolute positioning, pushing it down 50% and across from the left 50%. These 50% values relate to the size of the container (&lt;code&gt;body&lt;/code&gt;) element.&lt;/p&gt;

&lt;p&gt;The problem we now have is that the element now starts halfway down and halfway across the screen. It&amp;rsquo;s off center.&lt;/p&gt;

&lt;p&gt;To offset this, we use a transform to pull the element left 50% of it&amp;rsquo;s width, and up 40% of it&amp;rsquo;s width.&lt;/p&gt;

&lt;p&gt;At this stage the mouth is centered like so:&lt;/p&gt;

&lt;section class=&quot;demo-container baymax-container&quot;&gt;
  &lt;span class=&quot;baymax no-pseudo-elements&quot;&gt;&lt;/span&gt;
&lt;/section&gt;

&lt;h2&gt;Adding the eyes&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll make use of the &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; pseudo-elements to add eyes to the face. This won&amp;rsquo;t need any extra HTML and is entirely handled by the CSS.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.baymax::before {
  background: #000;
  border-radius: 50%;
  content: &amp;quot;&amp;quot;;
  position: absolute;
  width: 12em;
  height: 12em;
  left: -9em;
  top: -6em;
  transform: skewX(-4deg);
}

.baymax::after {
  background: #000;
  border-radius: 50%;
  content: &amp;quot;&amp;quot;;
  position: absolute;
  width: 12em;
  height: 12em;
  right: -9em;
  top: -6em;
  transform: skewX(4deg);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each of these pseudo-elements have a black background, and a border-radius of 50% to make them circular. Each is positioned at an end of the mouth, and lastly have a &lt;code&gt;skew&lt;/code&gt; transform to make them look like they&amp;rsquo;re tilted back a little. The result should look like this:&lt;/p&gt;

&lt;section class=&quot;demo-container baymax-container&quot;&gt;
  &lt;span class=&quot;baymax no-animation&quot;&gt;&lt;/span&gt;
&lt;/section&gt;

&lt;h2&gt;Low battery&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s a funny scene in the movie where Baymax&amp;rsquo;s battery runs low. He staggers around and his eyelids droop. We can use a combination of background gradients and animation to create the effect.&lt;/p&gt;

&lt;p&gt;First we want to give the background two colours. Black for the part of the eye that&amp;rsquo;s open, and white for the eyelid. The white part needs to be positioned outside the eyes at first, then we will animate it in to make the eyelids droop.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.baymax::before {
  background: linear-gradient(to bottom, #efefef, #efefef 50%, #000 50%, #000);
  background-position: 0 -100%;
  background-size: 200%;
  ...
}

.baymax::after {
  background: linear-gradient(to bottom, #efefef, #efefef 50%, #000 50%, #000);
  background-position: 0 -100%;
  background-size: 200%;
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;re adding a background linear gradient, made it twice the height of the container, and then position it so that the top half is outside the container.&lt;/p&gt;

&lt;p&gt;With the two background gradients in place, we can add animation &lt;code&gt;keyframes&lt;/code&gt; to control the eyelids movement.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@keyframes blink {
  0%, 50% {
    background-position: 0 100%;
  }
  85%, 95% {
    background-position: 0 75%;
  }
  100% {
    background-position: 0 100%;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Animation &lt;code&gt;keyframes&lt;/code&gt; are a way of describing a series of frames, using a percentage. The percentage relates to how long the animation has gone on for. So a percentage of 50% means half-way through the animation.&lt;/p&gt;

&lt;p&gt;In this way we can set the background to stay up till half-way through, then between 50% and 85%, it moves down, and then snaps back at the end of the animation.&lt;/p&gt;

&lt;p&gt;The next step is to tell the pseudo-elements to use these animation keyframes. Add the &lt;code&gt;animation&lt;/code&gt; property to the existing styles.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.baymax::before {
  animation: blink 6s infinite;
  ...
}

.baymax::after {
  animation: blink 6s 0.1s infinite;
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we&amp;rsquo;ve told the browser to use the &lt;code&gt;blink&lt;/code&gt; animation on each element. The animation duration is set to six seconds and will loop infinitely.&lt;/p&gt;

&lt;p&gt;One extra property is in the second example. The &lt;code&gt;0.1s&lt;/code&gt; after the &lt;code&gt;6s&lt;/code&gt; tells the browser to delay that animation by 0.1 seconds. This creates the effect of the second eye closing slightly later than the first. It adds to the tired, droopy effect and makes it look a little more human. The end result should look like this:&lt;/p&gt;

&lt;section class=&quot;demo-container baymax-container&quot;&gt;
  &lt;a href=&quot;http://codepen.io/donovanh/full/ZYaMjw/&quot; class=&quot;baymax&quot;&gt;&lt;/a&gt;
&lt;/section&gt;

&lt;p&gt;You can &lt;a href=&quot;http://codepen.io/donovanh/full/ZYaMjw/&quot;&gt;see the effect full screen&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Browsers&lt;/h2&gt;

&lt;p&gt;In the code examples, I&amp;rsquo;ve omitted any of the usual &lt;code&gt;-webkit&lt;/code&gt; and &lt;code&gt;-moz&lt;/code&gt; prefixes. The &lt;code&gt;transform&lt;/code&gt; and &lt;code&gt;animation&lt;/code&gt; properties should be prefixed, and I&amp;rsquo;d recommend using something like Autoprefixer for this. &lt;/p&gt;

&lt;h2&gt;Shareable gif version&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s an animated gif version you can more easily share online.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/baymax/baymax.gif&quot;&gt;&lt;img src=&quot;/assets/images/posts/baymax/baymax.gif&quot; style=&quot;max-width:225px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Animating List Items</title>
   <link href="https://cssanimation.rocks/list-items"/>
   <updated>2015-02-12T00:00:00+00:00</updated>
   <id>https://cssanimation.rocks/list-items</id>
   <content type="html">&lt;p&gt;When parts of a web page change, adding some animation is a good way to help your viewers understand what&amp;rsquo;s going on. Animations can announce the arrival of new content, or draw attention to content that&amp;rsquo;s in the process of being removed. In this article we&amp;rsquo;ll look at how this can be used to help introduce new content, by showing and hiding items in a list.&lt;/p&gt;

&lt;!--more--&gt;

&lt;section class=&quot;add-to-list swing-side demo-container&quot;&gt;
  &lt;ul&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #d13c9e;&quot;&gt;List item&lt;/li&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #3cd19e;&quot;&gt;List item&lt;/li&gt;
  &lt;/ul&gt;
  &lt;button&gt;Add a list item&lt;/button&gt;
&lt;/section&gt;

&lt;h2&gt;Introducing content&lt;/h2&gt;

&lt;p&gt;Animation can be useful when helping visitors understand when things change on your site. When content is added or removed without any animation, they can miss sudden changes and be confused. Adding subtle animations can avoid this and help by &amp;ldquo;announcing&amp;rdquo; that something is going to leave the page or be introduced to it.&lt;/p&gt;

&lt;p&gt;One example of adding or removing content is managing the content of a list. Most of the animations can be used for other sorts of content. If you find them useful, or have other ideas to add, do &lt;a href=&quot;mailto:hello@cssanimation.rocks&quot;&gt;get in touch&lt;/a&gt;, we love to hear your thoughts.&lt;/p&gt;

&lt;h2&gt;Setting up the HTML&lt;/h2&gt;

&lt;p&gt;To get started we&amp;rsquo;ll use a pre-filled list and a button to add new items to the list.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;ul id=&amp;quot;list&amp;quot;&amp;gt;
  &amp;lt;li class=&amp;quot;show&amp;quot;&amp;gt;List item&amp;lt;/li&amp;gt;
  &amp;lt;li class=&amp;quot;show&amp;quot;&amp;gt;List item&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;button id=&amp;quot;add-to-list&amp;quot;&amp;gt;Add a list item&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few things to note. Firstly we have two IDs in the HTML. Generally we don&amp;rsquo;t use IDs for styling, as they can introduce problems with their specificity. However they&amp;rsquo;re useful when using JavaScript. &lt;/p&gt;

&lt;p&gt;The initial items have the class &amp;ldquo;show&amp;rdquo;, as this is a class we&amp;rsquo;ll use later to add the animation effect.&lt;/p&gt;

&lt;h2&gt;A little JavaScript&lt;/h2&gt;

&lt;p&gt;For the purpose of the demo we&amp;rsquo;ll create a little JavaScript to add a new item to the list, then add the &amp;ldquo;show&amp;rdquo; class so that the animation can take place. There&amp;rsquo;s a reason for using this two-step process. If the list items were added in a visible state, there wouldn&amp;rsquo;t be any time for the transition to take place.&lt;/p&gt;

&lt;p&gt;We could get around this by using an animation on the &lt;code&gt;li&lt;/code&gt; elements, but this would be more difficult to override when removing the elements with another animation.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/*
 * Add items to a list - from cssanimation.rocks/list-items/
 */
document.getElementById(&amp;#39;add-to-list&amp;#39;).onclick = function() {
  var list = document.getElementById(&amp;#39;list&amp;#39;);
  var newLI = document.createElement(&amp;#39;li&amp;#39;);
  newLI.innerHTML = &amp;#39;A new item&amp;#39;;
  list.appendChild(newLI);
  setTimeout(function() {
    newLI.className = newLI.className + &amp;quot; show&amp;quot;;
  }, 10);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;No animation&lt;/h2&gt;

&lt;p&gt;At it&amp;rsquo;s most basic we can write some CSS to show the list items. We&amp;rsquo;re using the &lt;code&gt;show&lt;/code&gt; class as a way of setting them as visible, so removing the &lt;code&gt;show&lt;/code&gt; class should also cause them to disappear.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;li {
  list-style: none;
  background: #d1703c;
  color: #fff;
  height: 0;
  line-height: 2em;
  margin: 0;
  padding: 0 0.5em;
  overflow: hidden;
  width: 10em;
}

li.show {
  height: 2em;
  margin: 2px 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In these styles we&amp;rsquo;re setting up the &lt;code&gt;li&lt;/code&gt; elements to look like rectangles, without the bullet points and giving them a &lt;code&gt;height&lt;/code&gt; of 0, a &lt;code&gt;margin&lt;/code&gt; of 0 and set &lt;code&gt;overflow&lt;/code&gt; to hidden. This is so that they will appear invisible until we apply a &lt;code&gt;show&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;show&lt;/code&gt; class applies a height and margin. Since we&amp;rsquo;re not using animation yet, the items should appear suddenly on the page, like so. Also try pressing the list items to see them disappear.&lt;/p&gt;

&lt;section class=&quot;add-to-list demo-container&quot;&gt;
  &lt;ul&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #d13c9e;&quot;&gt;List item&lt;/li&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #3cd19e;&quot;&gt;List item&lt;/li&gt;
  &lt;/ul&gt;
  &lt;button&gt;Add a list item&lt;/button&gt;
&lt;/section&gt;

&lt;h3&gt;Fade&lt;/h3&gt;

&lt;p&gt;As a first animation we&amp;rsquo;ll add a simple fade effect. The list items appear a little more gradually than before. Visually this still looks a little clunky but has the benefit of giving viewers longer to notice that something is happening.&lt;/p&gt;

&lt;section class=&quot;add-to-list fade demo-container&quot;&gt;
  &lt;ul&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #d13c9e;&quot;&gt;List item&lt;/li&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #3cd19e;&quot;&gt;List item&lt;/li&gt;
  &lt;/ul&gt;
  &lt;button&gt;Add a list item&lt;/button&gt;
&lt;/section&gt;

&lt;p&gt;To add the effect I&amp;rsquo;ve created a separate snippet of CSS. To have this apply to the list, apply the class &lt;code&gt;fade&lt;/code&gt; to a container surrounding your list.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.fade li {
  transition: all 0.4s ease-out;
  opacity: 0;
  height: 2em;
}
.fade li.show {
  opacity: 1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Slide down &amp;amp; Fade&lt;/h3&gt;

&lt;p&gt;The sudden jump each time an item is added or removed is a litle jarring. Let&amp;rsquo;s have the height adjust as well, to create a smoother sliding effect.&lt;/p&gt;

&lt;section class=&quot;add-to-list slide-fade demo-container&quot;&gt;
  &lt;ul&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #d13c9e;&quot;&gt;List item&lt;/li&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #3cd19e;&quot;&gt;List item&lt;/li&gt;
  &lt;/ul&gt;
  &lt;button&gt;Add a list item&lt;/button&gt;
&lt;/section&gt;

&lt;p&gt;The difference between this and the &lt;code&gt;fade&lt;/code&gt; class above is only that the &lt;code&gt;height: 2em&lt;/code&gt; has been removed. Since the &lt;code&gt;show&lt;/code&gt; class contains a set height (inherited from the first CSS snippet), it will transition the height automatically.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.slide-fade li {
  transition: all 0.4s ease-out;
  opacity: 0;
}
.slide-fade li.show {
  opacity: 1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Swinging in&lt;/h3&gt;

&lt;p&gt;Along with fading and sliding, we can go further by adding a little 3D effect. Browser can transform elements in more than the X or Y directions, useful for adding depth to scenes.&lt;/p&gt;

&lt;section class=&quot;add-to-list swing demo-container&quot;&gt;
  &lt;ul&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #d13c9e;&quot;&gt;List item&lt;/li&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #3cd19e;&quot;&gt;List item&lt;/li&gt;
  &lt;/ul&gt;
  &lt;button&gt;Add a list item&lt;/button&gt;
&lt;/section&gt;

&lt;p&gt;To set this up, we need to define the containing &lt;code&gt;section&lt;/code&gt; as a stage within which the 3D transitions take place. We do this by giving it a &lt;code&gt;perspective&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;Perspective in CSS is the depth of the scene. A lower number means a more shallow perspective, with more extreme angles. It&amp;rsquo;s worth playing with this value to find a look that works for you.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.swing {
  perspective: 100px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we set up the &lt;code&gt;li&lt;/code&gt; elements to transform into place. We&amp;rsquo;ll use &lt;code&gt;opacity&lt;/code&gt; to create a fade effect as before, but add in a &lt;code&gt;transform&lt;/code&gt; to rotate the &lt;code&gt;li&lt;/code&gt; into place.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.swing li {
  opacity: 0;
  transform: rotateX(-90deg);
  transition: all 0.5s cubic-bezier(.36,-0.64,.34,1.76);
}

.swing li.show {
  opacity: 1;
  transform: none;
  transition: all 0.5s cubic-bezier(.36,-0.64,.34,1.76);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example we&amp;rsquo;re beginning with the &lt;code&gt;li&lt;/code&gt; rotated back by 90 degrees. When the &lt;code&gt;show&lt;/code&gt; class it added, this &lt;code&gt;transform&lt;/code&gt; is set to &lt;code&gt;none&lt;/code&gt;, allowing it to transition into place. To give it a swinging effect I&amp;rsquo;ve used the &lt;code&gt;cubic-bezier&lt;/code&gt; timing function.&lt;/p&gt;

&lt;h3&gt;Swinging from side&lt;/h3&gt;

&lt;p&gt;We can tweak this effect to create different styles quite easily. Here&amp;rsquo;s an example where the items swing in from the side.&lt;/p&gt;

&lt;section class=&quot;add-to-list swing-side demo-container&quot;&gt;
  &lt;ul&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #d13c9e;&quot;&gt;List item&lt;/li&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #3cd19e;&quot;&gt;List item&lt;/li&gt;
  &lt;/ul&gt;
  &lt;button&gt;Add a list item&lt;/button&gt;
&lt;/section&gt;

&lt;p&gt;To create this effect we only need change the axis of rotation.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.swing li {
  opacity: 0;
  transform: rotateY(-90deg);
  transition: all 0.5s cubic-bezier(.36,-0.64,.34,1.76);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All we&amp;rsquo;ve changed is &lt;code&gt;rotateX&lt;/code&gt; to &lt;code&gt;rotateY&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Prefixes and browser testing&lt;/h2&gt;

&lt;p&gt;The code included above does not include any prefixes, for readability. It&amp;rsquo;s strongly recommended to add prefixes to support browsers that need the &lt;code&gt;-webkit&lt;/code&gt; prefix or others. I use &lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;Autoprefixer&lt;/a&gt; to save worrying about these things.&lt;/p&gt;

&lt;p&gt;As these animations are layered on top of the basic show / hide mechanism, they should degrade gracefully on browsers that don&amp;rsquo;t support the animations. Testing on various devices and browsers is important but most modern browsers should be able to support these animations.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Animating pseudo-elements</title>
   <link href="https://cssanimation.rocks/pseudo-elements"/>
   <updated>2015-02-03T00:00:00+00:00</updated>
   <id>https://cssanimation.rocks/pseudo-elements</id>
   <content type="html">&lt;p&gt;Pseudo-elements are like getting extra DOM elements for free. They allow us to add extra content, decoration and more to our pages without adding extra HTML, and they can be animated. In this post we&amp;rsquo;ll use a pseudo-element to add a little visual flair to a button.&lt;/p&gt;

&lt;!--more--&gt;

&lt;section class=&quot;shiny demo-container tap-to-activate&quot;&gt;
  &lt;button&gt;Shiny effect&lt;/button&gt;
&lt;/section&gt;

&lt;h2&gt;Pseudo-elements&lt;/h2&gt;

&lt;p&gt;Within CSS, we can specify a pseudo-element using &lt;code&gt;::before&lt;/code&gt; or &lt;code&gt;::after&lt;/code&gt;. The pseudo-element is then inserted within your element, between the element and any content. Since it acts as an element of it&amp;rsquo;s own, it can be styled, positioned and more. The code looks a bit like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.pebble::before {
  ...
}
.pebble::after {
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, our &lt;code&gt;.pebble&lt;/code&gt; element has two virtual elements attached, and we can style them as needed.&lt;/p&gt;

&lt;h3&gt;Note on &amp;ldquo;::&amp;rdquo; versus &amp;ldquo;:&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s generally accepted that we use the double colon &lt;code&gt;::&lt;/code&gt; to denote pseudo-elements (as opposed to pseudo-classes like :hover, :first-child). If you&amp;rsquo;re adding IE8 support, it&amp;rsquo;s best to use the single &lt;code&gt;:&lt;/code&gt; instead. All other browsers and newer versions of IE support the double.&lt;/p&gt;

&lt;h3&gt;Don&amp;rsquo;t forget &amp;ldquo;content&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;When adding pseudo-elements, one thing to keep in mind is the need to specify the &lt;code&gt;content&lt;/code&gt; property before they can be made visible on the page. As the pseudo-element is created in an content-less state, we can trick it into appearing by using an empty &lt;code&gt;content&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.pebble::before {
  content: &amp;quot;&amp;quot;
  ... more styling goes here...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should make sure the element is visible on screen.&lt;/p&gt;

&lt;h2&gt;Example: Shiny button&lt;/h2&gt;

&lt;p&gt;For this example we&amp;rsquo;ll use a pseudo-element to create a shiny effect on hovering over a button. Here&amp;rsquo;s an example of it in action (hover or tap to see effect).&lt;/p&gt;

&lt;section class=&quot;shiny demo-container tap-to-activate&quot;&gt;
  &lt;button&gt;Shiny effect&lt;/button&gt;
&lt;/section&gt;

&lt;p&gt;To begin, some HTML:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;button&amp;gt;Oooh SHINY&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since we&amp;rsquo;re using pseudo-elements, we won&amp;rsquo;t need any more HTML than this to get going. You may want to add a class to the button if styling more than one type on a page, but for now we&amp;rsquo;ll use the generic element for simplicity.&lt;/p&gt;

&lt;h3&gt;Adding the sheen effect&lt;/h3&gt;

&lt;p&gt;The shiny sheen effect is a linear gradient that passes across the button. To create this we&amp;rsquo;ll use the &lt;code&gt;after&lt;/code&gt; pseudo-element, and position it in a beginning position outside the button:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;button::after {
  content: &amp;#39;&amp;#39;;
  position: absolute;
  top: -50%;
  right: -50%;
  bottom: -50%;
  left: -50%;
  background: linear-gradient(to bottom, rgba(229, 172, 142, 0), rgba(255,255,255,0.5) 50%, rgba(229, 172, 142, 0));
  transform: rotateZ(60deg) translate(-5em, 7.5em);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The sheen effect is made up of a gradient from the button colour to white and back again. At this point it is now sitting outside the button.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll need to hide the sheen layer so that it only shows on hover. To do this we&amp;rsquo;ll set the button&amp;rsquo;s &lt;code&gt;overflow&lt;/code&gt; property to &lt;code&gt;hidden&lt;/code&gt;. Since the pseudo-element is within the button, this means it&amp;rsquo;s positioning outside the button won&amp;rsquo;t be visible.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;button {
  background: #e5ac8e;
  color: #fff;
  font-size: 14px;
  border-radius: 0.5em;
  padding: 0 1em;
  position: relative;
  overflow: hidden;
  line-height: 32px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve put in some other styling also to give the button it&amp;rsquo;s own look. One thing to point out, is the use of &lt;code&gt;position: relative&lt;/code&gt;. I&amp;rsquo;ve added this property so that the absolutely positioned pseudo-element will exist within the button. Without specifying the position, an absolutely positioned item will position within a parent element.&lt;/p&gt;

&lt;h2&gt;Adding the animation&lt;/h2&gt;

&lt;p&gt;Since we&amp;rsquo;ll be using an animation in this example, there are two steps involved. The first is to tell the browser to use an animation on hover. Then we&amp;rsquo;ll set out exactly what that animation is using &lt;code&gt;keyframes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Adding the hover state can be done by stacking the &lt;code&gt;after&lt;/code&gt; onto the &lt;code&gt;hover&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;button:hover::after, button:focus::after {
  animation: sheen 1s forwards;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we are telling the browser than on hover, the &lt;code&gt;after&lt;/code&gt; pseudo-element is to have an &lt;code&gt;animation&lt;/code&gt;. The animation, called sheen, lasts one second and stops at the end without repeating.&lt;/p&gt;

&lt;p&gt;The order matters here. Using &lt;code&gt;::after:hover&lt;/code&gt; won&amp;rsquo;t work as it&amp;rsquo;ll be telling the browser to react to the hover state of the pseudo-element itself.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also added the focus state. This means that viewers tabbing through the page will see the sheen effect as well, without needing to hover. (Thank you, &lt;a href=&quot;https://twitter.com/simevidas&quot;&gt;Šime Vidas&lt;/a&gt;, for the tip)&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s specify &lt;code&gt;keyframes&lt;/code&gt; for this animation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@keyframes sheen {
  100% {
    transform: rotateZ(60deg) translate(1em, -9em);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We only need one keyframe in this case. Since the starting position (0%) is implied by the pseudo-element&amp;rsquo;s starting position, we only describe the end position. In this case the end position is across at the top-right of the button. The browser will then animate the sheen effect across for us.&lt;/p&gt;

&lt;section class=&quot;shiny demo-container tap-to-activate&quot;&gt;
  &lt;button&gt;Shiny effect&lt;/button&gt;
&lt;/section&gt;

&lt;h2&gt;Browser considerations&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;http://caniuse.com/#feat=css-animation&quot;&gt;animation property is well supported&lt;/a&gt;, as are &lt;a href=&quot;http://caniuse.com/#feat=css-gencontent&quot;&gt;pseudo-elements&lt;/a&gt;. It&amp;rsquo;s always good to make sure and include &lt;code&gt;-webkit&lt;/code&gt; and &lt;code&gt;-moz&lt;/code&gt; prefixes for the &lt;code&gt;keyframes&lt;/code&gt; and any transforms.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Twitter's "fave" animation</title>
   <link href="https://cssanimation.rocks/twitter-fave"/>
   <updated>2015-01-17T00:00:00+00:00</updated>
   <id>https://cssanimation.rocks/twitter-fave</id>
   <content type="html">&lt;p&gt;Twitter recently updated the design of their &amp;ldquo;fave&amp;rdquo; (also known as &amp;ldquo;fav&amp;rdquo;) button, introducing a new animation. Rather than rely on CSS transitions, the animation makes use of a series of images. Here&amp;rsquo;s how to recreate the animation using the CSS animation &lt;code&gt;steps&lt;/code&gt; timing function.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;Illusion of movement&lt;/h2&gt;

&lt;p&gt;The effect is similar to the old &lt;a href=&quot;http://en.wikipedia.org/wiki/Zoetrope&quot;&gt;Zoetrope&lt;/a&gt; devices, which presented a series of illustrations in sequence around a cylinder. Instead of a cylinder, we display a flat series of images inside an element.&lt;/p&gt;

&lt;h2&gt;Demo&lt;/h2&gt;

&lt;p&gt;Hover the star to see the animation:&lt;/p&gt;

&lt;section class=&quot;fave demo-container tap-to-activate&quot;&gt;&lt;/section&gt;

&lt;p&gt;In this example we begin by creating a series of images that will make up the animation. In this case we are using part of the image set from Twitter&amp;rsquo;s fave icon animation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/steps/twitter_fave_rectangle.png&quot; alt=&quot;Frames from Twitter&#39;s fave icon animation&quot; style=&quot;max-width:256px&quot;&gt;&lt;/p&gt;

&lt;p&gt;To animate these frames, we&amp;rsquo;ll need to put them into a single line. &lt;a href=&quot;/assets/images/posts/steps/twitter_fave.png&quot;&gt;This file&lt;/a&gt; has them in a single row, which means we can transition from the first frame to the last frame by positioning the background:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/steps/frames.png&quot; alt=&quot;How the background images are positioned within an element&quot; style=&quot;max-width:514px&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Steps() timing function&lt;/h3&gt;

&lt;p&gt;With most timing functions such as ease or cubic-bezier, the transition animates smoothly between the start and end states. The &lt;code&gt;steps&lt;/code&gt; timing function is different. Instead of a smooth transition, it divides up the transition into a number of steps and moves sharply between each step.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/steps/steps.png&quot; alt=&quot;How the steps function is illustrated on a graph, as a series of discrete steps&quot; style=&quot;max-width:362px&quot;&gt;&lt;/p&gt;

&lt;p&gt;To begin we set up the HTML:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;section class=&amp;quot;fave&amp;quot;&amp;gt;&amp;lt;/section&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Background image&lt;/h3&gt;

&lt;p&gt;With that in place we can add a little styling and position the background image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/steps/twitter_fave.png&quot; alt=&quot;Image sprite for the animation&quot;&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;.fave {
  width: 70px;
  height: 50px;
  background: url(images/twitter_fave.png) no-repeat;
  background-position: 0 0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;hover&lt;/code&gt; state is added, which is when we specify that the background position be moved to the end of the series of images:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;.fave:hover {
  background-position: -3519px 0;
  transition: background 1s steps(55);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the second rule, specifying the &lt;code&gt;transition&lt;/code&gt;. In this case we want to transition the background property, run the transition for a duration of two seconds, make use of the &lt;code&gt;steps&lt;/code&gt; timing function. The &lt;code&gt;steps&lt;/code&gt; part includes the value &lt;code&gt;55&lt;/code&gt;, as there are 55 frames in the animation.&lt;/p&gt;

&lt;p&gt;The effect is that when we hover over the element, it jumps through the transition in 55 equal steps.&lt;/p&gt;

&lt;h3&gt;Why not a gif?&lt;/h3&gt;

&lt;p&gt;Animated gifs could potentially be used but in this case would not be a great fit. The file size is generally worse and frame rate is difficult to control. With this method we can pause, rewind, or make all sorts of other adjustments to the animation using CSS.&lt;/p&gt;

&lt;h2&gt;Other uses of &amp;ldquo;steps()&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;Animating background sprites is just one use of the &lt;code&gt;steps&lt;/code&gt; timing function. Anything that needs to be animated in a series of discrete steps is a good fit for it. You could use it to create a ticking clock for example.&lt;/p&gt;

&lt;h2&gt;Cheatsheet&lt;/h2&gt;

&lt;p&gt;If you enjoyed this article, you can &lt;a href=&quot;https://twitter.com/intent/tweet?text=Recreate%20the%20Twitter%20fave%20icon%20animation&amp;amp;url=https://cssanimation.rocks/post/twitter-fave/&amp;amp;original_referer=https://cssanimation.rocks&quot;&gt;share it on Twitter&lt;/a&gt; or save this handy summary cheatsheet:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tips/twitter-fave.png&quot; alt=&quot;Share this summary on Twitter&quot; style=&quot;max-width:375px&quot;&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>CSS Animation</title>
 <link href="https://cssanimation.rocks/atom.xml" rel="self"/>
 <link href="https://cssanimation.rocks/"/>
 <updated>2015-03-09T10:07:49+00:00</updated>
 <id>https://cssanimation.rocks</id>
 <author>
   <name>Donovan</name>
   <email>hello@cssanimation.rocks</email>
 </author>

 
 <entry>
   <title>Transitions vs Animations</title>
   <link href="https://cssanimation.rocks/transition-vs-animation"/>
   <updated>2015-03-04T00:00:00+00:00</updated>
   <id>https://cssanimation.rocks/transition-vs-animation</id>
   <content type="html">&lt;p&gt;When animating on the web, do you use a transition or an animation? There are times when you would want to choose one over the other. Let&amp;rsquo;s discuss the differences.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;What are Transitions?&lt;/h2&gt;

&lt;p&gt;A transition occurs when an element changes from one state to another, and the browser fills in that state change with a sequence of in-between frames. It has a beginning and an end state.&lt;/p&gt;

&lt;p&gt;We most often see transitions used on hover states, or when information on a page is added or removed. The hover states might be a subtle change in font color, and information on the page might fade from invisible to visible.&lt;/p&gt;

&lt;p&gt;Since transitions are limited to these two stages, they can lack the nuance of animations but at the same time be easier to use.&lt;/p&gt;

&lt;h3&gt;When to use them&lt;/h3&gt;

&lt;p&gt;If you want to change an element from one state to another smoothly, a transition is a good choice. Simple changes can usually be handled with transitions and timing functions can be used to customize the way the transition occurs.&lt;/p&gt;

&lt;p&gt;A transition would work well when someone hovers or taps a button:&lt;/p&gt;

&lt;section class=&quot;shiny demo-container tap-to-activate&quot;&gt;
  &lt;button&gt;Shiny effect&lt;/button&gt;
&lt;/section&gt;

&lt;p&gt;Or when an item is added to a page:&lt;/p&gt;

&lt;section class=&quot;add-to-list swing demo-container&quot;&gt;
  &lt;ul&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #d13c9e;&quot;&gt;A list item&lt;/li&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #3cd19e;&quot;&gt;A list item&lt;/li&gt;
  &lt;/ul&gt;
  &lt;button&gt;Add a list item&lt;/button&gt;
&lt;/section&gt;

&lt;h2&gt;What are Animations?&lt;/h2&gt;

&lt;p&gt;CSS Animations are a more powerful alternative to transitions. Rather than rely on a change from one beginning state to an end state, animations can be made up of as many in-between states as you like, and offer more control over how the states are animated.&lt;/p&gt;

&lt;p&gt;Where a transition only goes from A to B, an animation can go from A, B, C to D. Or any number of stages as needed.&lt;/p&gt;

&lt;p&gt;Animations achieve this by using sets of &lt;code&gt;keyframes&lt;/code&gt;. Where a transition can be specified with one line in the class, an animation works by referencing a set of keyframes that are described separately in the CSS.&lt;/p&gt;

&lt;h3&gt;When to use them&lt;/h3&gt;

&lt;p&gt;If an animation needs to run when the page loads, or is more complex than a simple A to B state change, a CSS animation might be more appropriate.&lt;/p&gt;

&lt;p&gt;Examples of this might be if you want to have an animation on the page that plays after a certain amount of time, like this blink effect on this Baymax character:&lt;/p&gt;

&lt;section class=&quot;demo-container baymax-container&quot;&gt;
  &lt;a href=&quot;http://codepen.io/donovanh/full/ZYaMjw/&quot; class=&quot;baymax&quot;&gt;&lt;/a&gt;
&lt;/section&gt;

&lt;p&gt;An animation might also be a good choice if an item has to move across multiple places on the page, such as an instruction overlay with a mouse cursor point out various areas of interest on a screen.&lt;/p&gt;

&lt;h2&gt;Sometimes it&amp;rsquo;s not obvious&lt;/h2&gt;

&lt;p&gt;A recent post began as an animation, but then became a case for transitions.&lt;/p&gt;

&lt;div class=&quot;demo-container clocks single local bounce&quot;&gt;
  &lt;article class=&quot;clock station&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;p&gt;When I began designing this clock, I had the hands move continuously on load. This was a good case for using the &lt;code&gt;animation&lt;/code&gt; property. It was to animate on load and continue forever. When I started adding more complexity, I found it made more sense to have the hands&amp;rsquo; angles set using JavaScript.&lt;/p&gt;

&lt;p&gt;As the hands were being moved by JavaScript, &lt;code&gt;transitions&lt;/code&gt; became a better choice. When the JavaScript changes the angle of a hand, the CSS &lt;code&gt;transition&lt;/code&gt; handles the change (from state A to state B) more elegantly than an animation would.&lt;/p&gt;

&lt;p&gt;Check out this &lt;a href=&quot;/clocks/&quot;&gt;CSS clock tutorial&lt;/a&gt; for more detail.&lt;/p&gt;

&lt;h2&gt;In summary&lt;/h2&gt;

&lt;p&gt;Transitions for creating a smooth transition from one state to another, and animations for more complex series of movements.&lt;/p&gt;

&lt;p&gt;Transitions are generally easier to create and manage, and apply to the majority of situations. If you need more control over animating an element through a series of steps, or if the animation needs to begin on load, then an animation with keyframes might be the better choice.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Clocks</title>
   <link href="https://cssanimation.rocks/clocks"/>
   <updated>2015-02-25T00:00:00+00:00</updated>
   <id>https://cssanimation.rocks/clocks</id>
   <content type="html">&lt;p&gt;It&amp;rsquo;s about time. In this article we&amp;rsquo;ll take on the challenge of creating and animating a clock, using simple CSS animations as well as JavaScript to trigger them.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This is the clock we&amp;rsquo;ll create using HTML, CSS, an SVG background and a little JavaScript. We&amp;rsquo;ll use CSS animations or transitions for any movement, and rely on JavaScript to set the initial time and adding basic CSS transforms.&lt;/p&gt;

&lt;div class=&quot;demo-container clocks single local bounce&quot;&gt;
  &lt;article class=&quot;clock simple&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;h3&gt;HTML&lt;/h3&gt;

&lt;p&gt;To get started we&amp;rsquo;ll need some HTML. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;article class=&amp;quot;clock&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;hours-container&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;hours&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;minutes-container&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;minutes&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;seconds-container&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;seconds&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My initial approach was to use three elements for each of the hands. I then went back and wrapped each in a container element. While the simpler HTML worked as far as the basic CSS animations, we&amp;rsquo;ll need containing elements when we want to position the hands and  animate them also.&lt;/p&gt;

&lt;h2&gt;Clock face&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll begin with a basic clock design has a round face, with simple hours, minutes and seconds hands.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.clock {
  border-radius: 50%;
  background: #fff url(/assets/images/posts/clocks/ios_clock.svg) no-repeat center;
  background-size: 88%;
  height: 20em;
  padding-bottom: 31%;
  position: relative;
  width: 20em;
}

.clock.simple:after {
  background: #000;
  border-radius: 50%;
  content: &amp;quot;&amp;quot;;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  width: 5%;
  height: 5%;
  z-index: 10;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can &lt;a href=&quot;/assets/images/posts/clocks/ios_clock.svg&quot;&gt;get the SVG background here&lt;/a&gt;. I&amp;rsquo;ve also added a pseudo-element to add a solid black circle to the center. The hands of the clock can then be placed behind this pseudo-element as needed.&lt;/p&gt;

&lt;p&gt;We should now have something like this.&lt;/p&gt;

&lt;div class=&quot;demo-container clocks single&quot;&gt;
  &lt;article class=&quot;clock simple&quot;&gt;&lt;/article&gt;
&lt;/div&gt;

&lt;p&gt;Before adding the hands, we need to place the containers.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.minutes-container, .hours-container, .seconds-container {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This stacks each container on top of the clock. Next we create the hands.&lt;/p&gt;

&lt;h3&gt;Hour hand&lt;/h3&gt;

&lt;p&gt;Each hand is given the position property of &lt;code&gt;absolute&lt;/code&gt; and placed in the twelve o&amp;#39;clock position. We&amp;rsquo;ll begin with the hour hand.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.hours {
  background: #000;
  height: 20%;
  left: 48.75%;
  position: absolute;
  top: 30%;
  transform-origin: 50% 100%;
  width: 2.5%;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;m using percentages to make scaling the clocks easier. It&amp;rsquo;s a bit more work but makes it easier to have them fit the view or shrink down for mobiles. We also set the &lt;code&gt;transform-origin&lt;/code&gt; property to the bottom of the hand so that it can be rotated later.&lt;/p&gt;

&lt;div class=&quot;demo-container clocks single&quot;&gt;
  &lt;article class=&quot;clock simple&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;h3&gt;Minute hand&lt;/h3&gt;

&lt;p&gt;The minute hand is similar, but taller and thinner.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.minutes {
  background: #000;
  height: 40%;
  left: 49%;
  position: absolute;
  top: 10%;
  transform-origin: 50% 100%;
  width: 2%;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;demo-container clocks single&quot;&gt;
  &lt;article class=&quot;clock simple&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;h3&gt;Second hand&lt;/h3&gt;

&lt;p&gt;The second hand is thinner again, but also set further down so that it extends further than the center. To allow for this the &lt;code&gt;transform-origin&lt;/code&gt; to 80%. This leaves 20% of the hand extending past the center.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.seconds {
  background: #000;
  height: 45%;
  left: 49.5%;
  position: absolute;
  top: 14%;
  transform-origin: 50% 80%;
  width: 1%;
  z-index: 8;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;demo-container clocks single&quot;&gt;
  &lt;article class=&quot;clock simple&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;h3&gt;Animation&lt;/h3&gt;

&lt;p&gt;A stopped clock is only going to be right twice a day. Let&amp;rsquo;s add some animations to make the clock behave more like the real thing.&lt;/p&gt;

&lt;p&gt;Some clocks jump along with each second, usually making a ticking sound. Some clocks purr along with the hands moving smoothly. We&amp;rsquo;ll try both. First, we&amp;rsquo;ll make the hands move smoothly.&lt;/p&gt;

&lt;p&gt;We can use one &lt;code&gt;keyframe&lt;/code&gt; to tell the hands to move around 360 degrees (the 0% starting position is implied).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@keyframes rotate {
  100% {
    transform: rotateZ(360deg);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This keyframe tells the element to animate around 360 degrees, if applied to the element using the &lt;code&gt;animation&lt;/code&gt; property. We&amp;rsquo;ll use a &lt;code&gt;linear&lt;/code&gt; timing function on the hand to make the hands move smoothly.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.hours-container {
  animation: rotate 43200s infinite linear;
}
.minutes-container {
  animation: rotate 3600s infinite linear;
}
.seconds-container {
  animation: rotate 60s infinite linear;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;hours&lt;/code&gt; hand is set to rotate once every 12 hours (43,200 seconds). The minute hand rotates once per hour, and the second hand once every minute.&lt;/p&gt;

&lt;p&gt;Put it together and we now have movement!&lt;/p&gt;

&lt;div class=&quot;demo-container clocks single linear&quot;&gt;
  &lt;article class=&quot;clock simple&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;p&gt;If you are very sharp-eyed, you might be able to even make out the minute hand moving. It would take an hour for it to complete a rotation, and twelve hours for the hour hand to complete it&amp;rsquo;s circuit.&lt;/p&gt;

&lt;p&gt;The second hand takes 60 seconds, so it easier to notice.&lt;/p&gt;

&lt;h3&gt;Adding steps&lt;/h3&gt;

&lt;p&gt;We can make the hands behave more like a normal clock by having the second hand move around the clock in 60 separate movements. A simple way to achieve this is using the &lt;code&gt;steps&lt;/code&gt; timing function. The &lt;code&gt;animation&lt;/code&gt; property for each hand them becomes:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.minutes-container {
  animation: rotate 3600s infinite steps(60);
}
.seconds-container {
  animation: rotate 60s infinite steps(60);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both the minute and seconds hand now move around in sixty steps. The browser automatically calculates how far each of these 60 steps move. &lt;/p&gt;

&lt;div class=&quot;demo-container clocks single steps&quot;&gt;
  &lt;article class=&quot;clock simple&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;h3&gt;The correct time&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s all very well having the time look good, but how about being accurate? With a little JavaScript we can have the time be correct for our visitors. Here&amp;rsquo;s the code.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/*
 * Starts any clocks using the user&amp;#39;s local time
 * From: cssanimation.rocks/clocks
 */
function initLocalClocks() {
  // Get the local time using JS
  var date = new Date;
  var seconds = date.getSeconds();
  var minutes = date.getMinutes();
  var hours = date.getHours();

  // Create an object with each hand and it&amp;#39;s angle in degrees
  var hands = [
    {
      hand: &amp;#39;hours&amp;#39;,
      angle: (hours * 30) + (minutes / 2)
    },
    {
      hand: &amp;#39;minutes&amp;#39;,
      angle: (minutes * 6)
    },
    {
      hand: &amp;#39;seconds&amp;#39;,
      angle: (seconds * 6)
    }
  ];
  // Loop through each of these hands to set their angle
  for (var j = 0; j &amp;lt; hands.length; j++) {
    var elements = document.querySelectorAll(&amp;#39;.&amp;#39; + hands[j].hand);
    for (var k = 0; k &amp;lt; elements.length; k++) {
        elements[k].style.webkitTransform = &amp;#39;rotateZ(&amp;#39;+ hands[j].angle +&amp;#39;deg)&amp;#39;;
        elements[k].style.transform = &amp;#39;rotateZ(&amp;#39;+ hands[j].angle +&amp;#39;deg)&amp;#39;;
        // If this is a minute hand, note the seconds position (to calculate minute position later)
        if (hands[j].hand === &amp;#39;minutes&amp;#39;) {
          elements[k].parentNode.setAttribute(&amp;#39;data-second-angle&amp;#39;, hands[j + 1].angle);
        }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function converts the time (hours, minutes and seconds) into the corresponding angle for each hand. It then loops through each hand and applies that angle using the &lt;code&gt;style.transform&lt;/code&gt; property of &lt;code&gt;rotateZ&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This will work on most browsers, except Safari or other browsers needing a prefix. To allow for this we also use the &lt;code&gt;style.webkitTransform&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;This then sets the clock to the current system time.&lt;/p&gt;

&lt;div class=&quot;demo-container clocks single steps local no-bounce&quot;&gt;
  &lt;article class=&quot;clock simple&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;h3&gt;Aligning second and minute hands&lt;/h3&gt;

&lt;p&gt;We need to make sure that the minute hand moves when the second hand hits the twelve o&amp;#39;clock position.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/clocks/twelve.gif&quot; alt=&quot;Minute hand moving when second hand hits 12&quot; style=&quot;max-width: 180px&quot;&gt;&lt;/p&gt;

&lt;p&gt;When the clock is first drawn on screen there is less than one minute before the minute hand needs to move. To allow for this, we can calculate how long until this first minute ends and manually nudge the hand along. Since we&amp;rsquo;re using JavaScript to make this first movement, we can continue rotating it by six degrees every minute using &lt;code&gt;setInterval&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before we move the minute hand we need to communicate how far into the current minute we are. You may have noticed these lines.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if (degrees[j].hand === &amp;#39;minutes&amp;#39;) {
  elements[k].parentNode.setAttribute(&amp;#39;data-second-angle&amp;#39;, degrees[j + 1].degree);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These extra lines check to see if the hand is the &amp;ldquo;minutes&amp;rdquo; hand, and if so, sets a data attribute with the current angle of the seconds hand.&lt;/p&gt;

&lt;p&gt;With this data attribute set, we can then use this data to work out when to move the minute hand.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/*
 * Set a timeout for the first minute hand movement (less than 1 minute), then rotate it every minute after that
 */
function setUpMinuteHands() {
  // Find out how far into the minute we are
  var containers = document.querySelectorAll(&amp;#39;.minutes-container&amp;#39;);
  var secondAngle = containers[0].getAttribute(&amp;quot;data-second-angle&amp;quot;);
  if (secondAngle &amp;gt; 0) {
    // Set a timeout until the end of the current minute, to move the hand
    var delay = (((360 - secondAngle) / 6) + 0.1) * 1000;
    setTimeout(function() {
      moveMinuteHands(containers);
    }, delay);
  }
}

/*
 * Do the first minute&amp;#39;s rotation
 */
function moveMinuteHands(containers) {
  for (var i = 0; i &amp;lt; containers.length; i++) {
    containers[i].style.webkitTransform = &amp;#39;rotateZ(6deg)&amp;#39;;
    containers[i].style.transform = &amp;#39;rotateZ(6deg)&amp;#39;;
  }
  // Then continue with a 60 second interval
  setInterval(function() {
    for (var i = 0; i &amp;lt; containers.length; i++) {
      if (containers[i].angle === undefined) {
        containers[i].angle = 12;
      } else {
        containers[i].angle += 6;
      }
      containers[i].style.webkitTransform = &amp;#39;rotateZ(&amp;#39;+ containers[i].angle +&amp;#39;deg)&amp;#39;;
      containers[i].style.transform = &amp;#39;rotateZ(&amp;#39;+ containers[i].angle +&amp;#39;deg)&amp;#39;;
    }
  }, 60000);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Adding bounce&lt;/h3&gt;

&lt;p&gt;Since we&amp;rsquo;re now using JavaScript to move the minute hand, we should remove the animation property. Rather than simply remove it, we can replace it with a transition. This is an opportunity to add a bit more character to the animation.&lt;/p&gt;

&lt;p&gt;When the JavaScript sets a new angle for the hand, a CSS transition on the element will tell the browser to animate this new position. This means that the JavaScript only deals with the simple angle changes and the browser can take care of animating it.&lt;/p&gt;

&lt;p&gt;Before we do that, we should update the code to use JavaScript to move the seconds hand also. Let&amp;rsquo;s use this code to animate the seconds hands containers sixty times per minute.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/*
 * Move the second containers
 */
function moveSecondHands() {
  var containers = document.querySelectorAll(&amp;#39;.seconds-container&amp;#39;);
  setInterval(function() {
    for (var i = 0; i &amp;lt; containers.length; i++) {
      if (containers[i].angle === undefined) {
        containers[i].angle = 6;
      } else {
        containers[i].angle += 6;
      }
      containers[i].style.webkitTransform = &amp;#39;rotateZ(&amp;#39;+ containers[i].angle +&amp;#39;deg)&amp;#39;;
      containers[i].style.transform = &amp;#39;rotateZ(&amp;#39;+ containers[i].angle +&amp;#39;deg)&amp;#39;;
    }
  }, 1000);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With both the seconds and minute hands handled by JavaScript, update the CSS to replace the &lt;code&gt;animation&lt;/code&gt; properties with &lt;code&gt;transitions&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.minutes-container {
  transition: transform 0.3s cubic-bezier(.4,2.08,.55,.44);
}
.seconds-container {
  transition: transform 0.2s cubic-bezier(.4,2.08,.55,.44);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These transitions apply to the &lt;code&gt;transform&lt;/code&gt; property and use the &lt;code&gt;cubic-bezier&lt;/code&gt; timing function. This timing function gives the hands some bounce.&lt;/p&gt;

&lt;div class=&quot;demo-container clocks single local bounce&quot;&gt;
  &lt;article class=&quot;clock simple&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;h3&gt;iOS 7 Style&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m a big fan of the simplicity of the clock used in Apple&amp;rsquo;s iOS 7. They&amp;rsquo;ve since elongated the hands, but I prefer the shorter version.&lt;/p&gt;

&lt;p&gt;By styling the hands and adding a background image with the numbers, we can easily create this look.&lt;/p&gt;

&lt;div class=&quot;demo-container clocks single local bounce&quot;&gt;
  &lt;article class=&quot;clock ios7&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;p&gt;This design is itself an evolution of the &lt;a href=&quot;https://www.youtube.com/watch?v=IvIvKiDWDks&quot;&gt;Swiss Railway Clock&lt;/a&gt; by Hans Hilfiker. By changing a few styles and adding a new background image we can adapt our clock to this style.&lt;/p&gt;

&lt;div class=&quot;demo-container clocks single local bounce&quot;&gt;
  &lt;article class=&quot;clock station&quot;&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes angled&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;p&gt;If you come up with other designs, do &lt;a href=&quot;mailto:hello@cssanimation.rocks&quot;&gt;let me know&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Using Moment.js&lt;/h2&gt;

&lt;p&gt;One of my first ideas when planning this post was to recreate the hotel clocks scene, with three clocks showing different time zones.&lt;/p&gt;

&lt;p&gt;The easiest way to adjust for different time zones is by using the amazing &lt;a href=&quot;http://momentjs.com/timezone/&quot;&gt;Moment.js Timezone&lt;/a&gt; library.&lt;/p&gt;

&lt;div class=&quot;demo-container clocks multiple active bounce&quot;&gt;
  &lt;article class=&quot;clock station js-new-york&quot;&gt;
    &lt;div class=&quot;label&quot;&gt;New York&lt;/div&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
  &lt;article class=&quot;clock station js-london&quot;&gt;
    &lt;div class=&quot;label&quot;&gt;London&lt;/div&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
  &lt;article class=&quot;clock station js-tokyo&quot;&gt;
    &lt;div class=&quot;label&quot;&gt;Tokyo&lt;/div&gt;
    &lt;div class=&quot;hours-container&quot;&gt;
      &lt;div class=&quot;hours&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;minutes-container&quot;&gt;
      &lt;div class=&quot;minutes&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;seconds-container&quot;&gt;
      &lt;div class=&quot;seconds&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/div&gt;

&lt;p&gt;You can see the code in action &lt;a href=&quot;http://codepen.io/donovanh/full/vEjywy/&quot;&gt;on this Codepen&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Browser compatibility&lt;/h2&gt;

&lt;p&gt;Modern browsers can handle the CSS transitions and animations involved. IE10+, recent Chrome and Firefox support them without prefixes, and Safari requires the &lt;code&gt;-webkit&lt;/code&gt; prefix.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t forget to use the prefixed properties within JavaScript too.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Baymax in CSS</title>
   <link href="https://cssanimation.rocks/baymax"/>
   <updated>2015-02-18T00:00:00+00:00</updated>
   <id>https://cssanimation.rocks/baymax</id>
   <content type="html">&lt;p&gt;Let&amp;rsquo;s use CSS to create the Baymax character from the movie Big Hero 6.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In this post we&amp;rsquo;ll be animating a background image, as well as a subtle animation timing effect, and make a CSS demo out of one single HTML element.&lt;/p&gt;

&lt;section class=&quot;demo-container baymax-container&quot;&gt;
  &lt;a href=&quot;http://codepen.io/donovanh/full/ZYaMjw/&quot; class=&quot;baymax&quot;&gt;&lt;/a&gt;
&lt;/section&gt;

&lt;p&gt;You can &lt;a href=&quot;http://codepen.io/donovanh/full/ZYaMjw/&quot;&gt;see it full screen here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Single element&lt;/h2&gt;

&lt;p&gt;By making use of pseudo-elements, we&amp;rsquo;ll be able to create the face parts using one HTML element. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;div class=&amp;quot;baymax&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Styling&lt;/h2&gt;

&lt;p&gt;To set the stage we&amp;rsquo;ll add a subtle gradient to the screen to make it look like a curved, white head. For this we&amp;rsquo;ll use a radial gradient on the &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;body {
  background: radial-gradient(center, #fff, #fff 50%, #aaa);
  background-size: 100%;
  background-repeat: no-repeat;
  height: 100vh;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we position the face in the centre of the page. The mouth is a simple black line, and we&amp;rsquo;ll create that using a border.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.baymax {
  border-bottom: 1.5em solid #000;
  position: absolute;
  top: 50%;
  left: 50%;
  width: 50%;
  transform: translate(-50%, -40%);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first property sets a black border of width &lt;code&gt;1.5em&lt;/code&gt;. It then positions the line using absolute positioning, pushing it down 50% and across from the left 50%. These 50% values relate to the size of the container (&lt;code&gt;body&lt;/code&gt;) element.&lt;/p&gt;

&lt;p&gt;The problem we now have is that the element now starts halfway down and halfway across the screen. It&amp;rsquo;s off center.&lt;/p&gt;

&lt;p&gt;To offset this, we use a transform to pull the element left 50% of it&amp;rsquo;s width, and up 40% of it&amp;rsquo;s width.&lt;/p&gt;

&lt;p&gt;At this stage the mouth is centered like so:&lt;/p&gt;

&lt;section class=&quot;demo-container baymax-container&quot;&gt;
  &lt;span class=&quot;baymax no-pseudo-elements&quot;&gt;&lt;/span&gt;
&lt;/section&gt;

&lt;h2&gt;Adding the eyes&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll make use of the &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; pseudo-elements to add eyes to the face. This won&amp;rsquo;t need any extra HTML and is entirely handled by the CSS.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.baymax::before {
  background: #000;
  border-radius: 50%;
  content: &amp;quot;&amp;quot;;
  position: absolute;
  width: 12em;
  height: 12em;
  left: -9em;
  top: -6em;
  transform: skewX(-4deg);
}

.baymax::after {
  background: #000;
  border-radius: 50%;
  content: &amp;quot;&amp;quot;;
  position: absolute;
  width: 12em;
  height: 12em;
  right: -9em;
  top: -6em;
  transform: skewX(4deg);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each of these pseudo-elements have a black background, and a border-radius of 50% to make them circular. Each is positioned at an end of the mouth, and lastly have a &lt;code&gt;skew&lt;/code&gt; transform to make them look like they&amp;rsquo;re tilted back a little. The result should look like this:&lt;/p&gt;

&lt;section class=&quot;demo-container baymax-container&quot;&gt;
  &lt;span class=&quot;baymax no-animation&quot;&gt;&lt;/span&gt;
&lt;/section&gt;

&lt;h2&gt;Low battery&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s a funny scene in the movie where Baymax&amp;rsquo;s battery runs low. He staggers around and his eyelids droop. We can use a combination of background gradients and animation to create the effect.&lt;/p&gt;

&lt;p&gt;First we want to give the background two colours. Black for the part of the eye that&amp;rsquo;s open, and white for the eyelid. The white part needs to be positioned outside the eyes at first, then we will animate it in to make the eyelids droop.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.baymax::before {
  background: linear-gradient(to bottom, #efefef, #efefef 50%, #000 50%, #000);
  background-position: 0 -100%;
  background-size: 200%;
  ...
}

.baymax::after {
  background: linear-gradient(to bottom, #efefef, #efefef 50%, #000 50%, #000);
  background-position: 0 -100%;
  background-size: 200%;
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;re adding a background linear gradient, made it twice the height of the container, and then position it so that the top half is outside the container.&lt;/p&gt;

&lt;p&gt;With the two background gradients in place, we can add animation &lt;code&gt;keyframes&lt;/code&gt; to control the eyelids movement.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@keyframes blink {
  0%, 50% {
    background-position: 0 100%;
  }
  85%, 95% {
    background-position: 0 75%;
  }
  100% {
    background-position: 0 100%;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Animation &lt;code&gt;keyframes&lt;/code&gt; are a way of describing a series of frames, using a percentage. The percentage relates to how long the animation has gone on for. So a percentage of 50% means half-way through the animation.&lt;/p&gt;

&lt;p&gt;In this way we can set the background to stay up till half-way through, then between 50% and 85%, it moves down, and then snaps back at the end of the animation.&lt;/p&gt;

&lt;p&gt;The next step is to tell the pseudo-elements to use these animation keyframes. Add the &lt;code&gt;animation&lt;/code&gt; property to the existing styles.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.baymax::before {
  animation: blink 6s infinite;
  ...
}

.baymax::after {
  animation: blink 6s 0.1s infinite;
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we&amp;rsquo;ve told the browser to use the &lt;code&gt;blink&lt;/code&gt; animation on each element. The animation duration is set to six seconds and will loop infinitely.&lt;/p&gt;

&lt;p&gt;One extra property is in the second example. The &lt;code&gt;0.1s&lt;/code&gt; after the &lt;code&gt;6s&lt;/code&gt; tells the browser to delay that animation by 0.1 seconds. This creates the effect of the second eye closing slightly later than the first. It adds to the tired, droopy effect and makes it look a little more human. The end result should look like this:&lt;/p&gt;

&lt;section class=&quot;demo-container baymax-container&quot;&gt;
  &lt;a href=&quot;http://codepen.io/donovanh/full/ZYaMjw/&quot; class=&quot;baymax&quot;&gt;&lt;/a&gt;
&lt;/section&gt;

&lt;p&gt;You can &lt;a href=&quot;http://codepen.io/donovanh/full/ZYaMjw/&quot;&gt;see the effect full screen&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Browsers&lt;/h2&gt;

&lt;p&gt;In the code examples, I&amp;rsquo;ve omitted any of the usual &lt;code&gt;-webkit&lt;/code&gt; and &lt;code&gt;-moz&lt;/code&gt; prefixes. The &lt;code&gt;transform&lt;/code&gt; and &lt;code&gt;animation&lt;/code&gt; properties should be prefixed, and I&amp;rsquo;d recommend using something like Autoprefixer for this. &lt;/p&gt;

&lt;h2&gt;Shareable gif version&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s an animated gif version you can more easily share online.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/baymax/baymax.gif&quot;&gt;&lt;img src=&quot;/assets/images/posts/baymax/baymax.gif&quot; style=&quot;max-width:225px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Animating List Items</title>
   <link href="https://cssanimation.rocks/list-items"/>
   <updated>2015-02-12T00:00:00+00:00</updated>
   <id>https://cssanimation.rocks/list-items</id>
   <content type="html">&lt;p&gt;When parts of a web page change, adding some animation is a good way to help your viewers understand what&amp;rsquo;s going on. Animations can announce the arrival of new content, or draw attention to content that&amp;rsquo;s in the process of being removed. In this article we&amp;rsquo;ll look at how this can be used to help introduce new content, by showing and hiding items in a list.&lt;/p&gt;

&lt;!--more--&gt;

&lt;section class=&quot;add-to-list swing-side demo-container&quot;&gt;
  &lt;ul&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #d13c9e;&quot;&gt;List item&lt;/li&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #3cd19e;&quot;&gt;List item&lt;/li&gt;
  &lt;/ul&gt;
  &lt;button&gt;Add a list item&lt;/button&gt;
&lt;/section&gt;

&lt;h2&gt;Introducing content&lt;/h2&gt;

&lt;p&gt;Animation can be useful when helping visitors understand when things change on your site. When content is added or removed without any animation, they can miss sudden changes and be confused. Adding subtle animations can avoid this and help by &amp;ldquo;announcing&amp;rdquo; that something is going to leave the page or be introduced to it.&lt;/p&gt;

&lt;p&gt;One example of adding or removing content is managing the content of a list. Most of the animations can be used for other sorts of content. If you find them useful, or have other ideas to add, do &lt;a href=&quot;mailto:hello@cssanimation.rocks&quot;&gt;get in touch&lt;/a&gt;, we love to hear your thoughts.&lt;/p&gt;

&lt;h2&gt;Setting up the HTML&lt;/h2&gt;

&lt;p&gt;To get started we&amp;rsquo;ll use a pre-filled list and a button to add new items to the list.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;ul id=&amp;quot;list&amp;quot;&amp;gt;
  &amp;lt;li class=&amp;quot;show&amp;quot;&amp;gt;List item&amp;lt;/li&amp;gt;
  &amp;lt;li class=&amp;quot;show&amp;quot;&amp;gt;List item&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;button id=&amp;quot;add-to-list&amp;quot;&amp;gt;Add a list item&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few things to note. Firstly we have two IDs in the HTML. Generally we don&amp;rsquo;t use IDs for styling, as they can introduce problems with their specificity. However they&amp;rsquo;re useful when using JavaScript. &lt;/p&gt;

&lt;p&gt;The initial items have the class &amp;ldquo;show&amp;rdquo;, as this is a class we&amp;rsquo;ll use later to add the animation effect.&lt;/p&gt;

&lt;h2&gt;A little JavaScript&lt;/h2&gt;

&lt;p&gt;For the purpose of the demo we&amp;rsquo;ll create a little JavaScript to add a new item to the list, then add the &amp;ldquo;show&amp;rdquo; class so that the animation can take place. There&amp;rsquo;s a reason for using this two-step process. If the list items were added in a visible state, there wouldn&amp;rsquo;t be any time for the transition to take place.&lt;/p&gt;

&lt;p&gt;We could get around this by using an animation on the &lt;code&gt;li&lt;/code&gt; elements, but this would be more difficult to override when removing the elements with another animation.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/*
 * Add items to a list - from cssanimation.rocks/list-items/
 */
document.getElementById(&amp;#39;add-to-list&amp;#39;).onclick = function() {
  var list = document.getElementById(&amp;#39;list&amp;#39;);
  var newLI = document.createElement(&amp;#39;li&amp;#39;);
  newLI.innerHTML = &amp;#39;A new item&amp;#39;;
  list.appendChild(newLI);
  setTimeout(function() {
    newLI.className = newLI.className + &amp;quot; show&amp;quot;;
  }, 10);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;No animation&lt;/h2&gt;

&lt;p&gt;At it&amp;rsquo;s most basic we can write some CSS to show the list items. We&amp;rsquo;re using the &lt;code&gt;show&lt;/code&gt; class as a way of setting them as visible, so removing the &lt;code&gt;show&lt;/code&gt; class should also cause them to disappear.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;li {
  list-style: none;
  background: #d1703c;
  color: #fff;
  height: 0;
  line-height: 2em;
  margin: 0;
  padding: 0 0.5em;
  overflow: hidden;
  width: 10em;
}

li.show {
  height: 2em;
  margin: 2px 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In these styles we&amp;rsquo;re setting up the &lt;code&gt;li&lt;/code&gt; elements to look like rectangles, without the bullet points and giving them a &lt;code&gt;height&lt;/code&gt; of 0, a &lt;code&gt;margin&lt;/code&gt; of 0 and set &lt;code&gt;overflow&lt;/code&gt; to hidden. This is so that they will appear invisible until we apply a &lt;code&gt;show&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;show&lt;/code&gt; class then apples a height and margin. Since we&amp;rsquo;re not using animation yet, the items should appear suddenly on the page, like so. Also try pressing the list items to see them disappear.&lt;/p&gt;

&lt;section class=&quot;add-to-list demo-container&quot;&gt;
  &lt;ul&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #d13c9e;&quot;&gt;List item&lt;/li&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #3cd19e;&quot;&gt;List item&lt;/li&gt;
  &lt;/ul&gt;
  &lt;button&gt;Add a list item&lt;/button&gt;
&lt;/section&gt;

&lt;h3&gt;Fade&lt;/h3&gt;

&lt;p&gt;As a first animation we&amp;rsquo;ll add a simple fade effect. The list items appear a little more gradually than before. Visually this still looks a little clunky but has the benefit of giving viewers longer to notice that something is happening.&lt;/p&gt;

&lt;section class=&quot;add-to-list fade demo-container&quot;&gt;
  &lt;ul&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #d13c9e;&quot;&gt;List item&lt;/li&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #3cd19e;&quot;&gt;List item&lt;/li&gt;
  &lt;/ul&gt;
  &lt;button&gt;Add a list item&lt;/button&gt;
&lt;/section&gt;

&lt;p&gt;To add the effect I&amp;rsquo;ve created a separate snippet of CSS. To have this apply to the list, apply the class &lt;code&gt;fade&lt;/code&gt; to a container surrounding your list.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.fade li {
  transition: all 0.4s ease-out;
  opacity: 0;
  height: 2em;
}
.fade li.show {
  opacity: 1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Slide down &amp;amp; Fade&lt;/h3&gt;

&lt;p&gt;The sudden jump each time an item is added or removed is a litle jarring. Let&amp;rsquo;s have the height adjust as well, to create a smoother sliding effect.&lt;/p&gt;

&lt;section class=&quot;add-to-list slide-fade demo-container&quot;&gt;
  &lt;ul&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #d13c9e;&quot;&gt;List item&lt;/li&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #3cd19e;&quot;&gt;List item&lt;/li&gt;
  &lt;/ul&gt;
  &lt;button&gt;Add a list item&lt;/button&gt;
&lt;/section&gt;

&lt;p&gt;The difference between this and the &lt;code&gt;fade&lt;/code&gt; class above is only that the &lt;code&gt;height: 2em&lt;/code&gt; has been removed. Since the &lt;code&gt;show&lt;/code&gt; class contains a set height (inherited from the first CSS snippet), it will transition the height automatically.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.slide-fade li {
  transition: all 0.4s ease-out;
  opacity: 0;
}
.slide-fade li.show {
  opacity: 1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Swinging in&lt;/h3&gt;

&lt;p&gt;Along with fading and sliding, we can go further by adding a little 3D effect. Browser can transform elements in more than the X or Y directions, useful for adding depth to scenes.&lt;/p&gt;

&lt;section class=&quot;add-to-list swing demo-container&quot;&gt;
  &lt;ul&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #d13c9e;&quot;&gt;List item&lt;/li&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #3cd19e;&quot;&gt;List item&lt;/li&gt;
  &lt;/ul&gt;
  &lt;button&gt;Add a list item&lt;/button&gt;
&lt;/section&gt;

&lt;p&gt;To set this up, we need to define the containing &lt;code&gt;section&lt;/code&gt; as a stage within which the 3D transitions take place. We do this by giving it a &lt;code&gt;perspective&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;Perspective in CSS is the depth of the scene. A lower number means a more shallow perspective, with more extreme angles. It&amp;rsquo;s worth playing with this value to find a look that works for you.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.swing {
  perspective: 100px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we set up the &lt;code&gt;li&lt;/code&gt; elements to transform into place. We&amp;rsquo;ll use &lt;code&gt;opacity&lt;/code&gt; to create a fade effect as before, but add in a &lt;code&gt;transform&lt;/code&gt; to rotate the &lt;code&gt;li&lt;/code&gt; into place.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.swing li {
  opacity: 0;
  transform: rotateX(-90deg);
  transition: all 0.5s cubic-bezier(.36,-0.64,.34,1.76);
}

.swing li.show {
  opacity: 1;
  transform: none;
  transition: all 0.5s cubic-bezier(.36,-0.64,.34,1.76);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example we&amp;rsquo;re beginning with the &lt;code&gt;li&lt;/code&gt; rotated back by 90 degrees. When the &lt;code&gt;show&lt;/code&gt; class it added, this &lt;code&gt;transform&lt;/code&gt; is set to &lt;code&gt;none&lt;/code&gt;, allowing it to transition into place. To give it a swinging effect I&amp;rsquo;ve used the &lt;code&gt;cubic-bezier&lt;/code&gt; timing function.&lt;/p&gt;

&lt;h3&gt;Swinging from side&lt;/h3&gt;

&lt;p&gt;We can tweak this effect to create different styles quite easily. Here&amp;rsquo;s an example where the items swing in from the side.&lt;/p&gt;

&lt;section class=&quot;add-to-list swing-side demo-container&quot;&gt;
  &lt;ul&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #d13c9e;&quot;&gt;List item&lt;/li&gt;
    &lt;li class=&quot;show&quot; style=&quot;background-color: #3cd19e;&quot;&gt;List item&lt;/li&gt;
  &lt;/ul&gt;
  &lt;button&gt;Add a list item&lt;/button&gt;
&lt;/section&gt;

&lt;p&gt;To create this effect we only need change the axis of rotation.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.swing li {
  opacity: 0;
  transform: rotateY(-90deg);
  transition: all 0.5s cubic-bezier(.36,-0.64,.34,1.76);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All we&amp;rsquo;ve changed is &lt;code&gt;rotateX&lt;/code&gt; to &lt;code&gt;rotateY&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Prefixes and browser testing&lt;/h2&gt;

&lt;p&gt;The code included above does not include any prefixes, for readability. It&amp;rsquo;s strongly recommended to add prefixes to support browsers that need the &lt;code&gt;-webkit&lt;/code&gt; prefix or others. I use &lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;Autoprefixer&lt;/a&gt; to save worrying about these things.&lt;/p&gt;

&lt;p&gt;As these animations are layered on top of the basic show / hide mechanism, they should degrade gracefully on browsers that don&amp;rsquo;t support the animations. Testing on various devices and browsers is important but most modern browsers should be able to support these animations.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Animating pseudo-elements</title>
   <link href="https://cssanimation.rocks/pseudo-elements"/>
   <updated>2015-02-03T00:00:00+00:00</updated>
   <id>https://cssanimation.rocks/pseudo-elements</id>
   <content type="html">&lt;p&gt;Pseudo-elements are like getting extra DOM elements for free. They allow us to add extra content, decoration and more to our pages without adding extra HTML, and they can be animated. In this post we&amp;rsquo;ll use a pseudo-element to add a little visual flair to a button.&lt;/p&gt;

&lt;!--more--&gt;

&lt;section class=&quot;shiny demo-container tap-to-activate&quot;&gt;
  &lt;button&gt;Shiny effect&lt;/button&gt;
&lt;/section&gt;

&lt;h2&gt;Pseudo-elements&lt;/h2&gt;

&lt;p&gt;Within CSS, we can specify a pseudo-element using &lt;code&gt;::before&lt;/code&gt; or &lt;code&gt;::after&lt;/code&gt;. The pseudo-element is then inserted within your element, between the element and any content. Since it acts as an element of it&amp;rsquo;s own, it can be styled, positioned and more. The code looks a bit like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.pebble::before {
  ...
}
.pebble::after {
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, our &lt;code&gt;.pebble&lt;/code&gt; element has two virtual elements attached, and we can style them as needed.&lt;/p&gt;

&lt;h3&gt;Note on &amp;ldquo;::&amp;rdquo; versus &amp;ldquo;:&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s generally accepted that we use the double colon &lt;code&gt;::&lt;/code&gt; to denote pseudo-elements (as opposed to pseudo-classes like :hover, :first-child). If you&amp;rsquo;re adding IE8 support, it&amp;rsquo;s best to use the single &lt;code&gt;:&lt;/code&gt; instead. All other browsers and newer versions of IE support the double.&lt;/p&gt;

&lt;h3&gt;Don&amp;rsquo;t forget &amp;ldquo;content&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;When adding pseudo-elements, one thing to keep in mind is the need to specify the &lt;code&gt;content&lt;/code&gt; property before they can be made visible on the page. As the pseudo-element is created in an content-less state, we can trick it into appearing by using an empty &lt;code&gt;content&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.pebble::before {
  content: &amp;quot;&amp;quot;
  ... more styling goes here...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should make sure the element is visible on screen.&lt;/p&gt;

&lt;h2&gt;Example: Shiny button&lt;/h2&gt;

&lt;p&gt;For this example we&amp;rsquo;ll use a pseudo-element to create a shiny effect on hovering over a button. Here&amp;rsquo;s an example of it in action (hover or tap to see effect).&lt;/p&gt;

&lt;section class=&quot;shiny demo-container tap-to-activate&quot;&gt;
  &lt;button&gt;Shiny effect&lt;/button&gt;
&lt;/section&gt;

&lt;p&gt;To begin, some HTML:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;button&amp;gt;Oooh SHINY&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since we&amp;rsquo;re using pseudo-elements, we won&amp;rsquo;t need any more HTML than this to get going. You may want to add a class to the button if styling more than one type on a page, but for now we&amp;rsquo;ll use the generic element for simplicity.&lt;/p&gt;

&lt;h3&gt;Adding the sheen effect&lt;/h3&gt;

&lt;p&gt;The shiny sheen effect is a linear gradient that passes across the button. To create this we&amp;rsquo;ll use the &lt;code&gt;after&lt;/code&gt; pseudo-element, and position it in a beginning position outside the button:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;button::after {
  content: &amp;#39;&amp;#39;;
  position: absolute;
  top: -50%;
  right: -50%;
  bottom: -50%;
  left: -50%;
  background: linear-gradient(to bottom, rgba(229, 172, 142, 0), rgba(255,255,255,0.5) 50%, rgba(229, 172, 142, 0));
  transform: rotateZ(60deg) translate(-5em, 7.5em);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The sheen effect is made up of a gradient from the button colour to white and back again. At this point it is now sitting outside the button.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll need to hide the sheen layer so that it only shows on hover. To do this we&amp;rsquo;ll set the button&amp;rsquo;s &lt;code&gt;overflow&lt;/code&gt; property to &lt;code&gt;hidden&lt;/code&gt;. Since the pseudo-element is within the button, this means it&amp;rsquo;s positioning outside the button won&amp;rsquo;t be visible.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;button {
  background: #e5ac8e;
  color: #fff;
  font-size: 14px;
  border-radius: 0.5em;
  padding: 0 1em;
  position: relative;
  overflow: hidden;
  line-height: 32px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve put in some other styling also to give the button it&amp;rsquo;s own look. One thing to point out, is the use of &lt;code&gt;position: relative&lt;/code&gt;. I&amp;rsquo;ve added this property so that the absolutely positioned pseudo-element will exist within the button. Without specifying the position, an absolutely positioned item will position within a parent element.&lt;/p&gt;

&lt;h2&gt;Adding the animation&lt;/h2&gt;

&lt;p&gt;Since we&amp;rsquo;ll be using an animation in this example, there are two steps involved. The first is to tell the browser to use an animation on hover. Then we&amp;rsquo;ll set out exactly what that animation is using &lt;code&gt;keyframes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Adding the hover state can be done by stacking the &lt;code&gt;after&lt;/code&gt; onto the &lt;code&gt;hover&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;button:hover::after, button:focus::after {
  animation: sheen 1s forwards;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we are telling the browser than on hover, the &lt;code&gt;after&lt;/code&gt; pseudo-element is to have an &lt;code&gt;animation&lt;/code&gt;. The animation, called sheen, lasts one second and stops at the end without repeating.&lt;/p&gt;

&lt;p&gt;The order matters here. Using &lt;code&gt;::after:hover&lt;/code&gt; won&amp;rsquo;t work as it&amp;rsquo;ll be telling the browser to react to the hover state of the pseudo-element itself.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also added the focus state. This means that viewers tabbing through the page will see the sheen effect as well, without needing to hover. (Thank you, &lt;a href=&quot;https://twitter.com/simevidas&quot;&gt;Šime Vidas&lt;/a&gt;, for the tip)&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s specify &lt;code&gt;keyframes&lt;/code&gt; for this animation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@keyframes sheen {
  100% {
    transform: rotateZ(60deg) translate(1em, -9em);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We only need one keyframe in this case. Since the starting position (0%) is implied by the pseudo-element&amp;rsquo;s starting position, we only describe the end position. In this case the end position is across at the top-right of the button. The browser will then animate the sheen effect across for us.&lt;/p&gt;

&lt;section class=&quot;shiny demo-container tap-to-activate&quot;&gt;
  &lt;button&gt;Shiny effect&lt;/button&gt;
&lt;/section&gt;

&lt;h2&gt;Browser considerations&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;http://caniuse.com/#feat=css-animation&quot;&gt;animation property is well supported&lt;/a&gt;, as are &lt;a href=&quot;http://caniuse.com/#feat=css-gencontent&quot;&gt;pseudo-elements&lt;/a&gt;. It&amp;rsquo;s always good to make sure and include &lt;code&gt;-webkit&lt;/code&gt; and &lt;code&gt;-moz&lt;/code&gt; prefixes for the &lt;code&gt;keyframes&lt;/code&gt; and any transforms.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Twitter's "fave" animation</title>
   <link href="https://cssanimation.rocks/twitter-fave"/>
   <updated>2015-01-17T00:00:00+00:00</updated>
   <id>https://cssanimation.rocks/twitter-fave</id>
   <content type="html">&lt;p&gt;Twitter recently updated the design of their &amp;ldquo;fave&amp;rdquo; (also known as &amp;ldquo;fav&amp;rdquo;) button, introducing a new animation. Rather than rely on CSS transitions, the animation makes use of a series of images. Here&amp;rsquo;s how to recreate the animation using the CSS animation &lt;code&gt;steps&lt;/code&gt; timing function.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;Illusion of movement&lt;/h2&gt;

&lt;p&gt;The effect is similar to the old &lt;a href=&quot;http://en.wikipedia.org/wiki/Zoetrope&quot;&gt;Zoetrope&lt;/a&gt; devices, which presented a series of illustrations in sequence around a cylinder. Instead of a cylinder, we display a flat series of images inside an element.&lt;/p&gt;

&lt;h2&gt;Demo&lt;/h2&gt;

&lt;p&gt;Hover the star to see the animation:&lt;/p&gt;

&lt;section class=&quot;fave demo-container tap-to-activate&quot;&gt;&lt;/section&gt;

&lt;p&gt;In this example we begin by creating a series of images that will make up the animation. In this case we are using part of the image set from Twitter&amp;rsquo;s fave icon animation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/steps/twitter_fave_rectangle.png&quot; alt=&quot;Frames from Twitter&#39;s fave icon animation&quot; style=&quot;max-width:256px&quot;&gt;&lt;/p&gt;

&lt;p&gt;To animate these frames, we&amp;rsquo;ll need to put them into a single line. &lt;a href=&quot;/assets/images/posts/steps/twitter_fave.png&quot;&gt;This file&lt;/a&gt; has them in a single row, which means we can transition from the first frame to the last frame by positioning the background:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/steps/frames.png&quot; alt=&quot;How the background images are positioned within an element&quot; style=&quot;max-width:514px&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Steps() timing function&lt;/h3&gt;

&lt;p&gt;With most timing functions such as ease or cubic-bezier, the transition animates smoothly between the start and end states. The &lt;code&gt;steps&lt;/code&gt; timing function is different. Instead of a smooth transition, it divides up the transition into a number of steps and moves sharply between each step.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/steps/steps.png&quot; alt=&quot;How the steps function is illustrated on a graph, as a series of discrete steps&quot; style=&quot;max-width:362px&quot;&gt;&lt;/p&gt;

&lt;p&gt;To begin we set up the HTML:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;section class=&amp;quot;fave&amp;quot;&amp;gt;&amp;lt;/section&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Background image&lt;/h3&gt;

&lt;p&gt;With that in place we can add a little styling and position the background image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/steps/twitter_fave.png&quot; alt=&quot;Image sprite for the animation&quot;&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;.fave {
  width: 70px;
  height: 50px;
  background: url(images/twitter_fave.png) no-repeat;
  background-position: 0 0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;hover&lt;/code&gt; state is added, which is when we specify that the background position be moved to the end of the series of images:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;.fave:hover {
  background-position: -3519px 0;
  transition: background 1s steps(55);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the second rule, specifying the &lt;code&gt;transition&lt;/code&gt;. In this case we want to transition the background property, run the transition for a duration of two seconds, make use of the &lt;code&gt;steps&lt;/code&gt; timing function. The &lt;code&gt;steps&lt;/code&gt; part includes the value &lt;code&gt;55&lt;/code&gt;, as there are 55 frames in the animation.&lt;/p&gt;

&lt;p&gt;The effect is that when we hover over the element, it jumps through the transition in 55 equal steps.&lt;/p&gt;

&lt;h3&gt;Why not a gif?&lt;/h3&gt;

&lt;p&gt;Animated gifs could potentially be used but in this case would not be a great fit. The file size is generally worse and frame rate is difficult to control. With this method we can pause, rewind, or make all sorts of other adjustments to the animation using CSS.&lt;/p&gt;

&lt;h2&gt;Other uses of &amp;ldquo;steps()&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;Animating background sprites is just one use of the &lt;code&gt;steps&lt;/code&gt; timing function. Anything that needs to be animated in a series of discrete steps is a good fit for it. You could use it to create a ticking clock for example.&lt;/p&gt;

&lt;h2&gt;Cheatsheet&lt;/h2&gt;

&lt;p&gt;If you enjoyed this article, you can &lt;a href=&quot;https://twitter.com/intent/tweet?text=Recreate%20the%20Twitter%20fave%20icon%20animation&amp;amp;url=https://cssanimation.rocks/post/twitter-fave/&amp;amp;original_referer=https://cssanimation.rocks&quot;&gt;share it on Twitter&lt;/a&gt; or save this handy summary cheatsheet:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tips/twitter-fave.png&quot; alt=&quot;Share this summary on Twitter&quot; style=&quot;max-width:375px&quot;&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
